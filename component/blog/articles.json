[{"id":"04745B11B5A811EBBDB40A982EBFA742","name":"Generating Phaser Game assets: Planet spritesheet generator","slug":"generating-phaser-game-assets-planet-spritesheet-generator","teaser":"Ever needed to automate a process and all of a sudden you built a tool?","image_id":"FE96325BB5A711EBBDB40A982EBFA742","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"EFBFBD290421DBB211EFBFBD4BEFBFBD","is_public":1,"keywords":"gamedev,javascript","publish_date":"2021-05-15 18:23:49","insert_date":"2021-05-15 18:04:39","update_date":null,"delete_date":null,"inserted":1621101879000,"image":{"id":"FE96325BB5A711EBBDB40A982EBFA742","format":"image\/png","path":"\/asset\/upload\/0EC796EFBFBD7611EFBFBDEFBFBDEFBF\/c953328d990010bc4c41cf.png","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2021-05-15 18:04:30","delete_date":null},"rating":{"total":1,"average":"5.0000"},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"EFBFBD290421DBB211EFBFBD4BEFBFBD","name":"Blog","insert_date":"2019-09-20 14:27:57","delete_date":null},"store":[{"id":"04DD6FF7B5A811EBBDB40A982EBFA742","article_id":"04745B11B5A811EBBDB40A982EBFA742","store_key":"dev-to-id","value":"699285","insert_date":"2021-05-15 18:04:40","delete_date":null}],"content":[{"id":"0E54A0ABB5A911EBBDB40A982EBFA742","article_id":"04745B11B5A811EBBDB40A982EBFA742","sort":1,"content_type":"markdown","content":"## Why is that hard to find?\n\nWhen I first started to google procedural planet generators that would export into spritesheets I thought a few clicks would get me exactly to where I wanted to be. However, to my surprise I noticed that HTML5 game developers seem to have an awkward romantic relationship with assets. Pixelart packs are sold on various platforms and tools that help one map & generate an atlas or spritesheet - while primitive - are not even free. Well, I wasn't going to spend money only to end up doing a lot of manual work, so I decided to finally play with the an algorithm I stumbled upon in a completely different application: [Perlin Noise](https:\/\/en.wikipedia.org\/wiki\/Perlin_noise) \n\nWhen it comes to graphics, this can generate the patterns I can use for my surface. The next step was to come up with a plan:\n","insert_date":"2021-05-15 18:12:05","delete_date":null},{"id":"0B0E342BB5AA11EBBDB40A982EBFA742","article_id":"04745B11B5A811EBBDB40A982EBFA742","sort":2,"content_type":"markdown","content":"## What is a spritesheet?\n\nThe most logical way for me to generate a spritesheet was to calculate the rotation steps for one spin and then draw these frames to a canvas that is later going to be my spritesheet. So my strategy was clear:\n\n- Draw the generated planet on a canvas. \n- Export the frame to a second canvas accounting for the position based on the current frame\n- Rotate the planet and repeat.\n- Once done, generate an image based on the second canvas and offer it for download.\n\nAnd while I added a few tweaks and options along the way, this worked just fine.\n\nNow, as always, of course you can say that generating three planets in 5 hours of coding surely takes longer than opening up a graphics tool and generate three planets for [the game](https:\/\/neoan.us\/game). And as you know, you'd be right. However, the source-code is clear, has no dependencies and no build process and - **most importantly** - can be easily adapted to whatever you need to generate.\n\n| Repo | Deployed |\n| --- | --- |\n| [generator](https:\/\/github.com\/sroehrl\/planet-generator#readme) | https:\/\/sroehrl.github.io\/planet-generator\/ |\n| [game](https:\/\/github.com\/sroehrl\/theGame#readme) | https:\/\/neoan.us\/game\/ |\n","insert_date":"2021-05-15 18:19:09","delete_date":null}],"metrics":{"total":24,"unique":22},"has_image":true},{"id":"11A7E2CFA8F911EBA49C0A982EBFA742","name":"Do you even write?","slug":"do-you-even-write","teaser":"Using the blua.blue webhook in order to track your writing.","image_id":"7512F180A90111EBA49C0A982EBFA742","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"EFBFBD290421DBB211EFBFBD4BEFBFBD","is_public":1,"keywords":"Writerboards,watercooler,writing","publish_date":"2021-04-29 15:30:56","insert_date":"2021-04-29 14:42:06","update_date":null,"delete_date":null,"inserted":1619707326000,"image":{"id":"7512F180A90111EBA49C0A982EBFA742","format":"image\/jpeg","path":"\/asset\/upload\/0EC796EFBFBD7611EFBFBDEFBFBDEFBF\/6224fe1fe4655d659d11c1.jpeg","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2021-04-29 15:42:08","delete_date":null},"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"EFBFBD290421DBB211EFBFBD4BEFBFBD","name":"Blog","insert_date":"2019-09-20 14:27:57","delete_date":null},"store":[{"id":"12482541A8F911EBA49C0A982EBFA742","article_id":"11A7E2CFA8F911EBA49C0A982EBFA742","store_key":"dev-to-id","value":"682537","insert_date":"2021-04-29 14:42:07","delete_date":null}],"content":[{"id":"11A9F9FAA8F911EBA49C0A982EBFA742","article_id":"11A7E2CFA8F911EBA49C0A982EBFA742","sort":1,"content_type":"markdown","content":"# \"This year, I will write at least one article a week.\" - you\n\nHave you formulated such intentions before? I certainly have and I must admit that I haven't been consistent with any of such intentions. From the fitness world, we know that tracking your progress not only motivates and generates data, but generates a feeling of commitment that helps you to succeed. [Writerboards](https:\/\/writerboards.com) aims to tackle this issue for writers. However, not everybody is a novelist. Most of us write blogs, posts or articles. \n","insert_date":"2021-04-29 14:42:06","delete_date":null},{"id":"05D8E27CA8FA11EBA49C0A982EBFA742","article_id":"11A7E2CFA8F911EBA49C0A982EBFA742","sort":2,"content_type":"markdown","content":"## So how do you track your dev.to contributions?\n\nFirst, you need accounts for\n\n- [writerboards.com](https:\/\/writerboards.com)\n- [blua.blue](https:\/\/blua.blue) (or a self-hosted installation thereof)\n- [dev.to](https:\/\/dev.to) \n\n### Setup\n\nLet's start with dev.to: go to your [account settings](https:\/\/dev.to\/settings\/account) and generate an API key. Retain it.\n\nNext, visit [blua.blue's dev.to page](https:\/\/blua.blue\/dev-to\/) to convert your api-key to a blua.blue token.\n\nOnce done, visit [api settings](https:\/\/blua.blue\/profile\/#api) and make sure the following webhook info is present:\n\n|Reference |Endpoint |Token |\n--- | --- | ---\n| Dev.to | https:\/\/blua.blue\/api.v1\/dev-to | {your-token} |\n","insert_date":"2021-04-29 14:48:55","delete_date":null},{"id":"3EF8ACECA8FF11EBA49C0A982EBFA742","article_id":"11A7E2CFA8F911EBA49C0A982EBFA742","sort":3,"content_type":"markdown","content":"On Writerboards, go to [integrations](https:\/\/writerboards.com\/integrations) and select \"blua.blue\". This will generate the necessary webhook-data for blua.blue. Visit [api settings](https:\/\/blua.blue\/profile\/#api) again to input the information:\n\n|Reference |Endpoint |Token |\n --- | --- | --- \n| Writerboards | https:\/\/writerboards.com\/backend\/api.v1\/blua-blue | {your-token} |\n\n## That's it\n\nYou can now start writing on blua.blue and both Writerboards and Dev.to should show up preselected as webhooks. \n\n## Tags\/Keywords\n\nYou will probably notice that writerboards will only add tags that are known to the writerboards-community while dev.to limits tags in general, but allows free tag generations. Writerboards uses tags to count documents towards a group. If you are in a writerboards group and would like to be on the leaderboard, use one of the tags the group uses.","insert_date":"2021-04-29 15:26:19","delete_date":null}],"metrics":{"total":62,"unique":55},"has_image":true},{"id":"683CFD8247C611EB80B10A982EBFA742","name":"Install PHP 8 on Ubuntu","slug":"install-on-ubuntu-2","teaser":"PHP8 has finally been released and it is FAAAAST! Time to update.","image_id":null,"author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"php,php8,ubuntu","publish_date":"2020-12-26 22:15:14","insert_date":"2020-12-26 22:15:14","update_date":null,"delete_date":null,"inserted":1609020914000,"image":[],"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[{"id":"689F081D47C611EB80B10A982EBFA742","article_id":"683CFD8247C611EB80B10A982EBFA742","store_key":"dev-to-id","value":"553478","insert_date":"2020-12-26 22:05:04","delete_date":null}],"content":[{"id":"684306F647C611EB80B10A982EBFA742","article_id":"683CFD8247C611EB80B10A982EBFA742","sort":1,"content_type":"markdown","content":"## Installation\n\nIf you are running php7.x, it's likely you are already using the following repository. If not, here are the commands:\n\n`sudo apt install software-properties-common`\n`sudo add-apt-repository ppa:ondrej\/php`\n\nNow let's install PHP8:\n\n`sudo apt update`\n\n_APACHE_\n\n`sudo apt install php8.0 libapache2-mod-php8.0`\n\nWhen you are done installing your extensions, don't forget to restart with `sudo service apache2 restart` \n(or `sudo systemctl restart apache2` )\n\n_NGINX_\n\n`sudo apt install php8.0-fpm`\n\nWhen you are done installing your extensions, don't forget to restart with `sudo service nginx restart` \n(or `sudo systemctl restart nginx` )\n\n## Extensions\n\nBefore we give it a spin, let's install some common extensions we might need.\n(The following list is based on [neoan3](https:\/\/neoan3.rocks) requirements, feel free to check what you need for the setup of your choice)\n\n`sudo apt install php8-0-{mysql,zip,xml,curl}` or install them one-by-one in this format:\n\n`sudo apt install php8.0-xml` (see a list [here](https:\/\/www.php.net\/manual\/en\/extensions.alphabetical.php))\n\nHappy hacking!\n","insert_date":"2020-12-26 22:05:04","delete_date":null}],"metrics":{"total":230,"unique":219},"has_image":false},{"id":"7857D57644C111EB80B10A982EBFA742","name":"6 Technologies to look at in 2021","slug":"technologies-to-look-at-in","teaser":"2020 wasn't the best year humans can look back to. but what does 2021 bring for coders?","image_id":"9FD5ADD844C411EB80B10A982EBFA742","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"EFBFBD290421DBB211EFBFBD4BEFBFBD","is_public":1,"keywords":"watercooler,framework","publish_date":"2020-12-23 02:12:37","insert_date":"2020-12-23 02:14:47","update_date":null,"delete_date":null,"inserted":1608689687000,"image":{"id":"9FD5ADD844C411EB80B10A982EBFA742","format":"image\/jpeg","path":"\/asset\/upload\/0EC796EFBFBD7611EFBFBDEFBFBDEFBF\/902165f51817ad9e500369.jpeg","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2020-12-23 02:14:45","delete_date":null},"rating":{"total":1,"average":"5.0000"},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"EFBFBD290421DBB211EFBFBD4BEFBFBD","name":"Blog","insert_date":"2019-09-20 14:27:57","delete_date":null},"store":[{"id":"78AE97E844C111EB80B10A982EBFA742","article_id":"7857D57644C111EB80B10A982EBFA742","store_key":"dev-to-id","value":"550340","insert_date":"2020-12-23 01:52:10","delete_date":null}],"content":[{"id":"78601E0444C111EB80B10A982EBFA742","article_id":"7857D57644C111EB80B10A982EBFA742","sort":1,"content_type":"markdown","content":"Instead of looking back at a year we'd all rather forget, let's see what lays ahead of us:\n\n## (Micro-) Frameworks\nStuck in your stack? It's always dangerous to be married to a particular setup and miss new winds.\n\n### AlpineJS\nThis minimal JS solution grew its crowd in 2020 and became a true alternative for smaller projects. It feels like VueJS and the first Angular had a child that focusses on getting the job done. Give it a spin [here](https:\/\/github.com\/alpinejs\/alpine\/)\n\n### Node-Express-TypeScript\nTypeScript has been with us for a while now, but with Deno waiting to gain in popularity and more and more frameworks embracing it for userland, it's time to revisit the boilerplates we used for years. This little setup jump-starts your backend development while being approachable like your good ol' express server. [visit here](https:\/\/github.com\/sroehrl\/node-express-typescript)\n\n### Neoan3\nWith PHP8 finally out, it's time to prove to the world that working with PHP has become modern, fast (VERY FAST!) and clean. While this framework seems unusual at first, it will soon help you develop in the fastest way imaginable. So it's not only fast in delivering, but fast at developing as well. [neoan3](https:\/\/neoan3.rocks)\n\n## Design & CSS\nAnother bootstrap page? Aren't we all tiered of it? Let's explore something new.\n\n### Tailwind\nWhile Tailwind CSS doesn't come fresh off the shelf, its usage has become easier with recent versions. The utility based approach conquered the industry and truly individual designs resurface. [check it out](https:\/\/tailwindcss.com\/)\n\n### Gaudiamus\nThis SCSS \"framework\" is more like a framework creator. CSS frameworks like Ornate are based on this builder and if you ever wanted to have a solution that feels more like enabling you to roll your own without starting from scratch than dictating how things look like, this is for you [the repo](https:\/\/github.com\/gaudiamus-css\/gaudiamus-css.github.io) \n\n### Ant.Design\nDelivering components for major front-end frameworks (like React & VueJS), this design system is modern and slick.\nWhile there are many design systems gaining traction, I picked this as it feels most innovative to me personally. [visit here](https:\/\/ant.design)\n\n","insert_date":"2020-12-23 01:52:10","delete_date":null}],"metrics":{"total":333,"unique":329},"has_image":true},{"id":"A5F88643D58411EAA9C70A982EBFA742","name":"CSS Grid or CSS framework - are they really exclusive?","slug":"grid-or-framework-are-they-really-exclusive","teaser":"Grid-based or framework - there are many articles about this choice. But why is that even a thing?","image_id":"E6A246E7D5A411EAA9C70A982EBFA742","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"EFBFBD290421DBB211EFBFBD4BEFBFBD","is_public":1,"keywords":"css,beginners,tutorial,showdev","publish_date":"2020-08-03 16:52:12","insert_date":"2020-08-03 16:52:12","update_date":null,"delete_date":null,"inserted":1596473532000,"image":{"id":"E6A246E7D5A411EAA9C70A982EBFA742","format":"image\/png","path":"\/asset\/upload\/0EC796EFBFBD7611EFBFBDEFBFBDEFBF\/b77964e99fb3138d54a2dd.png","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2020-08-03 16:18:00","delete_date":null},"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"EFBFBD290421DBB211EFBFBD4BEFBFBD","name":"Blog","insert_date":"2019-09-20 14:27:57","delete_date":null},"store":[{"id":"A6797F84D58411EAA9C70A982EBFA742","article_id":"A5F88643D58411EAA9C70A982EBFA742","store_key":"dev-to-id","value":"416798","insert_date":"2020-08-03 12:27:09","delete_date":null}],"content":[{"id":"A967C217D58611EAA9C70A982EBFA742","article_id":"A5F88643D58411EAA9C70A982EBFA742","sort":1,"content_type":"markdown","content":"## If you search for a CSS Grid-based framework, you are out of luck...\n\nInstead, you will find articles centering around the question of when to use one over the other. But why? In order to understand that, let's look a little into history: In a few days twitter bootstrap will celebrate its 7th birthday. From the very first version on, the CSS framework quickly became the most influential candidate when choosing to design web-layouts. At that time the word responsive was coined and everybody wanted to get in on it. However, browsers weren't really up to par with the growing mobile usage. How did bootstrap do it? In version 1: not at all. In version 2: With ***float***! This meant \"hacking\" custom margins into first and last children and clearing using the pseudo-class ***after*** on the level of the parent. And breakpoints: how about one single breakpoint?\n\nIt was solid and browser compatible at the time, but it seems to have set a particular markup in stone: the \"row\" is a necessary container, the elements themselves decide their size\/behavior: ","insert_date":"2020-08-03 12:41:33","delete_date":null},{"id":"5F5BFF0CD58A11EAA9C70A982EBFA742","article_id":"A5F88643D58411EAA9C70A982EBFA742","sort":2,"content_type":"markdown","content":"```html\n<p>Bootstrap 2.0<\/p>\n<div class=\"row\">\n   <div class=\"span6\">col 1<\/div>\n   <div class=\"span6\">col 2<\/div>\n<\/div>\n```\nWith version 3 declarative breakpoints entered, making it possible to define behavior for various screen sizes:\n\n```html\n<p>Bootstrap 3.3<\/p>\n<div class=\"row\">\n   <div class=\"col-xs-12 col-md-8\">col 1<\/div>\n   <div class=\"col-xs-6 col-md-4\">col 2<\/div>\n<\/div>\n```\n\nThis form of markup never changed. The CSS world has moved to flexbox and more breakpoints dictate more capabilities, but all frameworks you will find will likely use similar markup, creating HTML like this:\n ```html\n<div class=\"row\">\n   <div class=\"col-xs-12 col-md-6 col-lg-4\">col 1<\/div>\n   <div class=\"col-xs-12 col-md-6 col-lg-4\">col 2<\/div>\n   <div class=\"col-xs-12 col-md-12 col-lg-4\">col 3<\/div>\n<\/div>\n```\n\nAnd we all think that's normal and are used to fighting with our HTML on multiple class-declarations when making changes to our column-behavior. ","insert_date":"2020-08-03 13:08:07","delete_date":null},{"id":"54A39928D5A711EAA9C70A982EBFA742","article_id":"A5F88643D58411EAA9C70A982EBFA742","sort":3,"content_type":"markdown","content":"## Enter CSS grid\n\nWith modern capabilities, one would think meanwhile a couple of revolutions would have occurred. But no, we still write grids like that. CSS grid works way easier than that. So easy, that people seem to either supplement frameworks with native CSS grid or avoid CSS frameworks all together. However, aren't there way too many things in modern CSS frameworks you wouldn't want to live without? Why aren't there any frameworks built around this concept? \n\n## Revelation 1: Tailwindcss\n\n[Tailwind](https:\/\/tailwindcss.com)\n\nIf you haven't heard of tailwind, you are behind. The concept has such an impact on the way we design the web, many of the utility class concepts are now part of popular other frameworks. And if you understand how to use tailwind, it is already 80 % of what we want to talk about today: a framework-builder rather than a framework. ***Why?*** Because utilizing plugins and preprocessors the right way let you build whatever you need. So combining tailwind with CSS-grid and using your own compositions (in tailwind referred to as base styles) should do the trick? Kinda. The problem is more from a practical perspective: Plugins, Webpack, postCSS, and additional markup is a lot of work for starting a project while using it \"out-of-the-box\" a rather tedious task due to the amount of classes you write. It's still the coolest thing out there, but unfortunately not approachable for the casual user or beginner. \n\n## Revelation 2: Gaudiamus-css\n\n[Gaudiamus-css](https:\/\/gaudiamus-css.github.io\/)\n\nThe concept of Gaudiamus is to expose relevant variables to enable a relatively simple way to modify and even create utility classes. While not as powerful as tailwind, it has two features that stick out:\n\n### Grid\n\nWe talked about this a couple of paragraphs above: the way we define grid-systems is painful. Integrating CSS-Grid into a framework enables you to convert the \"bootstrap-way\" of writing this: \n\n```html\n<div class=\"row\">\n   <div class=\"col-xs-12 col-md-6 col-lg-4\">col 1<\/div>\n   <div class=\"col-xs-12 col-md-6 col-lg-4\">col 2<\/div>\n   <div class=\"col-xs-12 col-md-6 col-lg-4\">col 3<\/div>\n   <div class=\"col-xs-12 col-md-6 col-lg-4\">col 4<\/div>\n<\/div>\n```\n\nInto this:\n\n```html\n<div class=\"grid-12 md:grid-6-6 lg:grid-4-4-4\">\n   <div>col 1<\/div>\n   <div>col 2<\/div>\n   <div>col 3<\/div>\n   <div>col 4<\/div>\n<\/div>\n```\n\n### Class constructor\n\nSecondly, it is very simple to create your own CSS with the use of provided sass-maps. You want a particular color to be named \"danger\" and generate utilities for it? No problem, setting to variables will generate classes like\n\n- text-danger (color)\n- bg-danger (background color)\n- b-danger (border)\n- hover:raise-1-danger (on hover, provide \"danger\"-colored dropshadow with a depth of one spacing-unit)\n- ...\n\nIn the last step, we can create compositions based on regular SASS:\n\n```css\n.btn {\n   @extend .b-1, .b-rounded, .p-x-2, .p-y-1;\n}\n.btn-danger{\n   @extend .btn, .text-white, .bg-danger;\n}\n\/\/ you can also use the generate-classes mixin to generate \n\/\/ all variations of all colors & states, but let's keep it simple here\n```\n\nThe result is easy to use and requires only basic knowledge of SASS (here scss to be precise). Check it out!","insert_date":"2020-08-03 16:35:24","delete_date":null}],"metrics":{"total":313,"unique":304},"has_image":true},{"id":"35E7FF45D01511EA97930A982EBFA742","name":"Scaffolding REST APIs with JWT authentication","slug":"scaffolding-aP-is-with-authentication","teaser":"Ever had the need for your own backend while developing your web-app?","image_id":"13648B1CD01511EA97930A982EBFA742","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"API,PHP,restful,scaffolding","publish_date":"2020-07-27 15:51:57","insert_date":"2020-07-27 15:51:57","update_date":null,"delete_date":null,"inserted":1595865117000,"image":{"id":"13648B1CD01511EA97930A982EBFA742","format":"image\/jpeg","path":"\/asset\/upload\/0EC796EFBFBD7611EFBFBDEFBFBDEFBF\/70b107e85c06210251e7a3.jpeg","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2020-07-27 14:25:52","delete_date":null},"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[{"id":"36AC9113D01511EA97930A982EBFA742","article_id":"35E7FF45D01511EA97930A982EBFA742","store_key":"dev-to-id","value":"411030","insert_date":"2020-07-27 14:26:51","delete_date":null}],"content":[{"id":"6A24A77FD01611EA97930A982EBFA742","article_id":"35E7FF45D01511EA97930A982EBFA742","sort":1,"content_type":"markdown","content":"[repo](https:\/\/github.com\/sroehrl\/neoan3-demo-api)\n\n## Scaffolding an API?\n\nWhile walking students through a neoan3 tutorial the other day, I noticed a demo I built could actually be used to scaffold an API for all kind of use-cases. The result of what I built went far beyond the original plan: to create a simple backend for testing and developing. Through to the architecture of this creator tool, one can use it to quickly set up a simple API and later built it out to be a scalable and robust production solution. That's right! A cli-based generator of API endpoints that scaffolds a solid backend for you.\n\nFirst, let's have a look at setting it up.\n\n## Prerequisites\nAll you need is a local PHP installation (7.4), composer and [neoan3-cli](https:\/\/github.com\/neoan3\/cli) (make sure you install it globally and that it is available in your path)\n\n## Installation\n\n```bash\ncomposer create-project sroehrl\/scaffold-api\ncd scaffold-api\nneoan3 develop\n```\n\nAt this point you should see that the server started on localhost:8080. All endpoints are exposed at ***localhost:8080\/api.v1\/***\n\n\n#### What now?\n\nThe app already ships with authentication based on JWT, so we can use our existing app (or postman?) to register a user:\n\n***POST \/api.v1\/users***\n\nYou can make changes to the register & login behavior by going to \"\/models\/users\/users.model.php\", but by default, the model expects at least \n\n- userName and \n- password\n\nas fields. You can add whatever else you want to store to the user. Once created, the API will respond with a status code of 200, as well as your user-object and a JWT token. \n\n_NOTE:_ per default, all custom endpoints require a valid baerer token. So unless you fire at the login (POST \/api.v1\/users\/auth) or the registration (POST \/api.v1\/users), you will need to use this token as authorization header (look at the javascript examples in the readme).","insert_date":"2020-07-27 14:35:27","delete_date":null},{"id":"E39D5404D01911EA97930A982EBFA742","article_id":"35E7FF45D01511EA97930A982EBFA742","sort":2,"content_type":"markdown","content":"## Custom endpoints\n\nNow the interesting part: Authentication is the starting point, but what then? A simple command creates additional endpoints:\n\n`php scaffold tags` for example, will generate the following files:\n\n***\/component\/tags\/tags.ctrl.php*** and ***\/model\/tags\/tag.model.php***\n\nTheir content will make the following endpoints available:\n\n***POST \/api.v1\/tags*** creates new tag\n\n***PUT \/api.v1\/tags\/:tag-id*** updates a tag\n\n***GET \/api.v1\/tags*** lists\/searches for tags (get-parameters with conditions can be used)\n\n***GET \/api.v1\/tags\/:tag-id*** retrieves specific tag by id.\n\nWant to make your endpoint public for now? Simply comment out `Stateless::restrict()` in component\/tags\/tags.ctrl.php in the appropriate method function.\n\nSo far so good. Now simply send a POST call with a json-payload to \/api.v1\/tags and you have your first tag.\n\nLet me know what you think!","insert_date":"2020-07-27 15:00:19","delete_date":null}],"metrics":{"total":657,"unique":644},"has_image":true},{"id":"FB11CA2D8AE811EA9F230A982EBFA742","name":"What is composer?","slug":"what-is-composer","teaser":"Composer has become PHP's package & dependency manager. Why you should use it. ","image_id":"CE08EE118AE811EA9F230A982EBFA742","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"php,composer,beginner","publish_date":"2020-04-30 14:32:59","insert_date":"2020-04-30 14:32:59","update_date":null,"delete_date":null,"inserted":1588257179000,"image":{"id":"CE08EE118AE811EA9F230A982EBFA742","format":"image\/png","path":"\/asset\/upload\/0EC796EFBFBD7611EFBFBDEFBFBDEFBF\/46344e351dc0b777b9ca4b.png","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2020-04-30 13:45:08","delete_date":null},"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[{"id":"FBA75FA48AE811EA9F230A982EBFA742","article_id":"FB11CA2D8AE811EA9F230A982EBFA742","store_key":"dev-to-id","value":"322886","insert_date":"2020-04-30 13:46:24","delete_date":null}],"content":[{"id":"FB177D558AE811EA9F230A982EBFA742","article_id":"FB11CA2D8AE811EA9F230A982EBFA742","sort":1,"content_type":"markdown","content":"## On a high level\n\nA few years back, bower has dominated packages. The need to reuse libraries & other packages for the web has grown massively since then. While the idea wasn't revolutionary (things like brew & apt-get have been around for quite some time), web development introduced the need for project-specific setup. Node has npm, Ruby gems, PHP composer etc.\nBut what do these managers do and why do you need them?\n\n### Dependency management\n\nManaging dependencies manually is nearly impossible: a particular SDK requires a particular api-library which in turn requires a particular version of a curl-wrapper which uses a particular library to deal with headers. Since we move away from monolithic packages, manual dependency management would be extremely painful. But if every library would hold standardized information on what it requires, we would be able to track these dependencies, wouldn't we? With composer, such a file would be called composer.json. It helps composer to install, remove or update dependencies for the current project.\n\n### Auto-loading\n\nInstalling dependencies is one thing, but how do I use them? In PHP, I have a couple of possibilities. And certainly the last thing I want to do is to write a thousand include-statements in every file. Especially, as noted above, if I don't always know what I need. PHP can resolve files by namespace with the use of autoloading. Composer automates this process for us by generating one single autoload-file which in turn let's us have access to all installed packages. You can make your own namespaces and include them into your composer.json to include your own files in the same way. Let's walk through it:","insert_date":"2020-04-30 13:46:23","delete_date":null},{"id":"F733DF298AEB11EA9F230A982EBFA742","article_id":"FB11CA2D8AE811EA9F230A982EBFA742","sort":2,"content_type":"markdown","content":"## Installation\n\nThe first thing you want to do is to install composer and make sure it is included in your system's PATH variable. \n\n### Prerequisites\n\nMake sure php is within your PATH by opening up a terminal (Windows: cmd) and trying: `php -v`.\nThe unleash the full power of composer, make sure you have GIT installed as well: `git --version'. If either of those commands don't work for you, make sure you have php & git installed and explore how to add them to the PATH variable of your system.\n\n### Installing composer\n\nComposer offers a simple [installer](https:\/\/getcomposer.org\/Composer-Setup.exe) for Windows, if you don't want to use a command line. In general, composer can be installed only using php: [official guide](https:\/\/getcomposer.org\/download\/)\n\n### Verifying installation\n\nAfter installation, open anew terminal and type `composer`. This should display common commands.","insert_date":"2020-04-30 14:07:45","delete_date":null},{"id":"5287EB778AED11EA9F230A982EBFA742","article_id":"FB11CA2D8AE811EA9F230A982EBFA742","sort":3,"content_type":"markdown","content":"## First project\n\nTo give it a test-run, let's create a new folder\/project. Enter the path in a terminal and run `composer init`.\nYou will notice that a composer.json will be created which holds basic information about your project. \n\nNow we require our first dependency: `composer require vlucas\/phpdotenv`. You will notice that composer installs three packages in order to deal with dependencies of this package. Additionally, composer created a vendor-folder to hold these packages.\n\n_NOTE:_ This package is used to easily integrate .env-file variables as system-environment variables. \n\nNext, let's create an index.php\n\n```php\n<?php\nrequire 'vendor\/autoload.php';\n```\n\nWe now have \"access\" to all installed packages via namespace. e.g. \n\n```php\n$dotenv = Dotenv\\Dotenv::createImmutable(__DIR__);\n$dotenv->load();\n```\nAs you can see, Dotenv\\Dotenv will be loaded using the autoloader and we don't have to worry about the dependencies either.\n\n## Packagist\n\nLastly, the package repository for composer can be found at [packagist.org](https:\/\/packagist.org)\n","insert_date":"2020-04-30 14:17:28","delete_date":null}],"metrics":{"total":545,"unique":540},"has_image":true},{"id":"E33E5DB4736211EA9F230A982EBFA742","name":"MySQL: ERROR1364 fix","slug":"my-fix","teaser":"The painful realization of why people use containers.","image_id":"58B8FF45737311EA9F230A982EBFA742","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"linux,mysql","publish_date":"2020-03-31 21:14:07","insert_date":"2020-03-31 21:14:07","update_date":null,"delete_date":null,"inserted":1585689247000,"image":{"id":"58B8FF45737311EA9F230A982EBFA742","format":"image\/png","path":"\/asset\/upload\/0EC796EFBFBD7611EFBFBDEFBFBDEFBF\/083ba6e01d46ed38db4932.png","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2020-03-31 17:16:23","delete_date":null},"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[{"id":"E3A4E8C4736211EA9F230A982EBFA742","article_id":"E33E5DB4736211EA9F230A982EBFA742","store_key":"dev-to-id","value":"295857","insert_date":"2020-03-31 15:18:35","delete_date":null}],"content":[{"id":"767C6878737311EA9F230A982EBFA742","article_id":"E33E5DB4736211EA9F230A982EBFA742","sort":1,"content_type":"markdown","content":"## It's all about the money\n\nSaving $s has become a hard fact for many individuals and companies these days. In this process I started questioning whether I really need an AWS RDS database instance of whether I run my mysql installation on my EC2. After a rather simple switch, I set up a cron-job for dumps and planned on storing them in a separate S3 bucket (you never know, right?).\n\nThe complete process took me less than two hours and I started to rethink some DevOps concepts after being very happy with the benchmarks & performance of my brave EC2 micro instance.\n\n## Failing inserts\n\nHowever, something was off. Did people stop using the POC installation of [blua.blue](https:\/\/blua.blue)? Since I am a big proponent of privacy, monitoring is limited to a minimum. But API traffic seemed normal. \n\nI tried logging in, changing settings, signing up, commenting, viewing - all seemed working. Until I failed to create a new article.\n\n## Unusual debugging\n\nI was unable to reproduce the error locally and none of the error logs on my server showed anything. Hm, how was my error reporting set up again? Sometimes the bold methods are the right choice: I logged every SQL-transaction result and found the following error-number on some transactions:  **1364**\n\n## Field doesn't have a default value\n\nA quick google search revealed that apparently some of my tables contain columns requiring a value. But didn't I use exactly the same schemata as previously used via RDS? Thankfully, I am not the first one running into this issue and it seemed I should check somewhere else then I expected: in my MySQL configuration. The fist thing I did was verifying that what I read online is indeed my problem:\n\n```\nmysql> SHOW VARIABLES LIKE 'sql_mode';\n```\n\n\n","insert_date":"2020-03-31 17:17:13","delete_date":null},{"id":"9364603A739011EA9F230A982EBFA742","article_id":"E33E5DB4736211EA9F230A982EBFA742","sort":2,"content_type":"markdown","content":"And sure enough, there it was: **STRICT_TRANS_TABLES**\n\nWhat this variable does is setting the your MySQL to reject any empty (or most likely undefined) field or your query unless there is a defined default value.\nI don't know about you, but I always lived quite happily with the fact that nullable fields will default to null. And minimizing constraints is definitely a plus on top of the laziness. \nSo how can I get rid of that behavior? \n\n## Changing the configuration\n\nThe easiest way is to override your mysql configuration. Depending on your setup, your will find various .cnf files that will offer possibilities. If you are not sure, simply create a new one   in the conf-directory (likely `\/etc\/mysql\/conf.d\/`).\n\nHere are the steps to take:\n\n1. copy your existing mode-variable (see above SQL-query)\n2. define your new sql_mode variable (under mysqld block)\n3. restart the mysql service\n\nIf you created your own **.cnf**-file (e.g. custom.cnf ), it could now look like this:\n\n```\n[mysqld]\nsql_mode=IGNORE_SPACE,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\nAfter restarting your service, you might want to check your setup again\n\n`$ sudo service mysql restart`\n\n`$ mysql -u root -p`\n`mysql> SHOW VARIABLES LIKE 'sql_mode';`\n","insert_date":"2020-03-31 20:45:37","delete_date":null}],"metrics":{"total":395,"unique":395},"has_image":true},{"id":"46EFBFBD7FEFBFBD4F4111EFBFBD020A","name":"Cyber wars: Defending your server","slug":"cyber-wars-defending-your-server","teaser":"Maintaining your own server can be a thrill. High security standards can protect you from data leakage, injection attacks and DDoS attempts. But what about adaptive brute force?","image_id":"48EFBFBDEFBFBD754F4411EFBFBD020A","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"EFBFBD290421DBB211EFBFBD4BEFBFBD","is_public":1,"keywords":"linux,aws,security","publish_date":"2020-02-14 16:30:07","insert_date":"2020-02-14 16:30:07","update_date":null,"delete_date":null,"inserted":1581697807000,"image":{"id":"48EFBFBDEFBFBD754F4411EFBFBD020A","format":"image\/jpeg","path":"\/asset\/upload\/0EC796E5A57611E992F0ECF4BBBEDA10\/131f4affb8a79df5e91df9.jpeg","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2020-02-14 16:08:48","delete_date":null},"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"EFBFBD290421DBB211EFBFBD4BEFBFBD","name":"Blog","insert_date":"2019-09-20 14:27:57","delete_date":null},"store":[{"id":"47375CEFBFBD4F4111EFBFBD020AEFBF","article_id":"46EFBFBD7FEFBFBD4F4111EFBFBD020A","store_key":"dev-to-id","value":"261610","insert_date":"0000-00-00 00:00:00","delete_date":null}],"content":[{"id":"46EFBFBD44EFBFBD4F4111EFBFBD020A","article_id":"46EFBFBD7FEFBFBD4F4111EFBFBD020A","sort":1,"content_type":"markdown","content":"Photo by Saksham Gangwar on [Unsplash](https:\/\/unsplash.com\/photos\/BVWD_zX6-Zk)\n\n## My contact forms don't work anymore?\n\nI maintain my own mail-server using postfix & dovecot on an amazon ec2 linux instance. Sure, I could use amazon's SES service, but not only am I cheap, but a geek. Such a service is a commitment: next to the obvious security challenge, one get's to become familiar with things like dmarc and spf, as well as protocols like imap.\n\n## First slow, then impossible\n\nIt started a few days ago: My server became slower and slower. It took me a while to suspect something going on, as traffic to some of my sites was high recently and I am using a nano-instance. So my first instinct was to scale the instance. Due diligence let me to first check some logs, though.\n\n## Ireland & Russia: intercontinental rockets coming in\n\nWhat I saw was astonishing. From various different IP addresses associated with Irish and Russian server farms my server was targeted with brute-force attempts both to see what email addresses exist (checking for rejected recipient addresses) as well as SASL login attempts. As soon as the quota for unsuccessful attempts was reached, the next attempt came from a different IP.\n\n## Someone is looking to take over my server to send out spam?\n\nAlthough my fort held, the massive traffic brought my server to it's knees. Service interruptions and slow delivery was the least of my problems. At the end of the day, it was only a question of time: brute-force always works. It's just a question of how long it takes. And needless to say, with aws I pay for computing. \n\n## First counter: block IPs for a longer period after the second unsuccessful login attempt and limit simultaneous connections from the same client \n\nIt seemed like a logical first step, but you probably already guessed it: the remote IPs just changed more frequently. I suppose whatever script they use is adaptive.\n\n## Let's go Confucius on them\n\nHave you ever wondered why your bounces take so long to be reported back to you? I always wondered why I receive a \"failed to deliver\" notification hours after I tried to reach someone. But in this context, it all of a sudden made sense. Your script wants to know whether the email \"admin@mymail.com\" exists? How about I just accept that email for now. I was aware that I had to take into account that legitimate senders must eventually be informed, but first I had to see if this actually works.\n\n## Rockets are stupid\n\nWell, so the behavior didn't adapt, but it also didn't stop raining incommings on my server. As a matter of fact, now it was assumed that emails were found so login attempts on these (non-existing accounts) started to ramp up. Uff. So traffic got even worse.\n\n## The emperor's new clothes \n\nHold on! I am thinking defensive. **Attack is the best defense**, isn't it? So what's the endgame here? The attack is likely targeted at using a mail server to send out spam. And the mails will likely include links to malicious pages using email addresses bought in the dark net. With many options to report sites to blacklists and to inform about leaked emails, **wouldn't it be interesting to know what those emails contain and simply report any hyperlink in them directly without these emails ever reaching the victims**?\n\n## A different kind of honeypot\n\nMy plan was simple: Let's create the accounts they are trying to log in with on the fly (or at least almost, am fighting with some delays here and there) and use a rainbow table to give these accounts the most common passwords possible. They will be able to generate a successful login fast. However, instead of letting these accounts send out emails, let's limit their quota to 0 and put those emails in a folder for further processing. However, in order for this to work, we must influence the smpt response appropriately to keep the impression that the mail has been sent out. \n\n_NOTE:_ While I would love to go into more detail here, I  cannot share some modifications until I am certain such activity isn't traceable or poses any other kind of risk or negative effect.\n\n## The battle is over, but the war goes on\n\nNot even a day later they successfully logged in. To my surprise, no emails have been sent out yet. I don't know the business model, but maybe at that point these credentials are sold and another group or individual does the actual mailings. However, that gives me some time. I still need to process the emails and automatically report the links and recipients. \n\n## Join the rebels\n\nSo here is the long-term plan: If this works out, I want to lift such methods to an open source level and enable webmasters to join forces. What I don't know at this point is how expensive this is going to get for me. I applied common limits but who knows how much data is going to be sent to my server. I'll let you know...\n\n","insert_date":"2020-02-14 15:47:16","delete_date":null}],"metrics":{"total":548,"unique":547},"has_image":true},{"id":"3B7572EFBFBD492911EFBFBD020AEFBF","name":"Git: globally change GitHub-remotes from git@ to https","slug":"git-globally-change-git-hub-remotes-from-git-to-https","teaser":"Does your IDE or composer set remote repositories to ssh rather than https? Or are repositories you are using set up that way? You are not alone. Let's fix it once and for all!","image_id":null,"author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"git,github","publish_date":"2020-02-06 21:40:06","insert_date":"2020-02-06 21:40:06","update_date":null,"delete_date":null,"inserted":1581025206000,"image":[],"rating":{"total":1,"average":"5.0000"},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[{"id":"3BEFBFBD6FEFBFBD492911EFBFBD020A","article_id":"3B7572EFBFBD492911EFBFBD020AEFBF","store_key":"dev-to-id","value":"256997","insert_date":"0000-00-00 00:00:00","delete_date":null}],"content":[{"id":"3B78EFBFBD22492911EFBFBD020AEFBF","article_id":"3B7572EFBFBD492911EFBFBD020AEFBF","sort":1,"content_type":"markdown","content":"## Setting upstreams\n\nAre you finding yourself using `git remote --add --push`-commands not to actually change the location, but to fix authentication problems with GitHub arising from using ssh instead of https? There is a simple solution. \n\nThe format of the ssh-url is\n\n**git@github.com:[userOrOrg]\/[repoName].git**, while we want it to be\n**https:\/\/github.com\/[userOrOrg]\/[repoName].git**\n \nThat is very predictable, so you can run the following command:\n\n`git config --global url.\"https:\/\/github.com\/\".insteadOf git@github.com:`\n\nNote the trailing slash as well as the colon! \n\n## Yes, that simple!\n\nThat's it. You can verify (and change) the setting by inspecting the global configuration:\n\n`git config --global --edit`\n\n","insert_date":"2020-02-06 21:40:02","delete_date":null}],"metrics":{"total":521,"unique":519},"has_image":false},{"id":"575FEFBFBDEFBFBD3AEFBFBD11EFBFBD","name":"VueJS & neoan3: a love story.","slug":"vue-neoan3-love-story","teaser":"Setting up neoan3 to play nice with Vue isn't hard. Here is how the two frameworks are combined to support fast, dynamic and rapid development.","image_id":null,"author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"php,neoan3,vue","publish_date":"2020-01-19 21:48:14","insert_date":"2020-01-19 21:48:14","update_date":null,"delete_date":null,"inserted":1579470494000,"image":[],"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[{"id":"57DF8BEFBFBD3AEFBFBD11EFBFBD020A","article_id":"575FEFBFBDEFBFBD3AEFBFBD11EFBFBD","store_key":"dev-to-id","value":"241402","insert_date":"0000-00-00 00:00:00","delete_date":null}],"content":[{"id":"576271EFBFBD3AEFBFBD11EFBFBD020A","article_id":"575FEFBFBDEFBFBD3AEFBFBD11EFBFBD","sort":1,"content_type":"markdown","content":"**originally posted on [blua.blue](https:\/\/blua.blue\/article\/vue-neoan3-love-story)**\n\n[play tutorial video](https:\/\/youtu.be\/rh4nRElym2M)\n\n_To stay aligned with the video, we will call our app & project-folder \"video\" and our frame \"vuePhp\"_\n\n## What is the challenge?\n\nI noticed that division between front- & back-end, packaging tools like webpack as well as containerized delivery has created many over-engineered solutions to the basic development flow of applications. As a full-stack developer, I often develop the front- and back-end simultaneously while requiring to serve resources \n\n- dynamic\n- selective (don't want a particular view\/endpoint to load unused components)\n- fast\n- without additional development servers, build processes etc.\n\n## Manipulating the way neoan3 serves files\n\nWhether it be the serve.file endpoint, the autoloader or the conditional rendering: neoan3 doesn't seem to be set up to work nicely with VueJS. But then there is the layer of the frames that let's us easily alter the very way the core executes the rendering process. What we will do is combining the cli-tool's built-in capability to use templates with combined with the extensibility of core functionality provided by a neoan3 frame.\n\nIn order to do this we will\n1. create a new neoan3 app\n2. create a new neoan3 frame\n3. create cli-templates\n\n## 1. create a new neoan3 app\n\nIf you haven't already, please install the cli globally (`npm i -g neoan3-cli`). Then, after navigating to a new folder in our localhost (optional, you can also use neoan3's server.php to run the app), we create a new project using our terminal:\n\n`neoan3 new app video`\n\n## 2. create a new neoan3 frame\n\nAfter running `neoan3 new frame vuePhp`, we want to extend the constructor and the output of the core:\n\n```PHP\n<?php\n\/* Generated by neoan3-cli *\/\n\nnamespace Neoan3\\Frame;\n\nuse Neoan3\\Core\\Serve;\n\nclass VuePhp extends Serve\n{\n    function __construct(){\n        parent::__construct();\n    }\n    function output($params = []){\n        parent::output($params);\n    }\n}\n```\n ","insert_date":"2020-01-19 20:29:07","delete_date":null},{"id":"EFBFBD3279EFBFBD3B0011EFBFBD020A","article_id":"575FEFBFBDEFBFBD3AEFBFBD11EFBFBD","sort":2,"content_type":"markdown","content":"After installing vue (`npm i vue`), we want to include the framework. The file \"vue\/dist\/vue.js\" includes vue's development tools while the file \"vue\/dist\/vue.min.js\" does not. So what we want to do is to include the development environment when we are serving via localhost:\n\n```PHP\nif($_SERVER['HTTP_HOST'] == 'localhost'){\n        $this->includeJs(base . 'node_modules\/vue\/dist\/vue.js');\n} else {\n        $this->includeJs(base . 'node_modules\/vue\/dist\/vue.min.js');\n}\n```\n\nWe can place this snippet in the constructor _after_ calling the parent's constructor. \n\nneoan3's default hooks for views are\n\n- header\n- main\n- footer\n\nWhat we want to achieve is to wrap the complete main container in a vue element and subsequently use components. To achieve that, we will directly write to the js stream of neoan3 and overwrite the main container in the output function _before_ we execute the parent function:\n\n```PHP\n$this->js .= 'new Vue({el:\"#root\"});';\n$this->main = '<div id=\"root\">' . $this->main . '<\/div>';\n```\n_NOTE: there are cleaner solutions, but this \"quick & dirty\" hack is stable and reliable_\n\nYour complete frame should now look like this:\n\n```PHP\n\n<?php\n\/* Generated by neoan3-cli *\/\n\nnamespace Neoan3\\Frame;\n\nuse Neoan3\\Core\\Serve;\n\nclass VuePhp extends Serve\n{\n    function __construct()\n    {\n        parent::__construct();\n        if($_SERVER['HTTP_HOST'] == 'localhost'){\n            $this->includeJs(base . 'node_modules\/vue\/dist\/vue.js');\n        } else {\n            $this->includeJs(base . 'node_modules\/vue\/dist\/vue.min.js');\n        }\n    }\n   \n    function output($params = [])\n    {\n        $this->js .= 'new Vue({el:\"#root\"});';\n        $this->main = '<div id=\"root\">' . $this->main . '<\/div>';\n        parent::output($params);\n    }\n}\n\n```\n\nWhat we are still missing is a nice way to integrate\/load our custom vue components.\nWe will set it up in a way that divides view (template) and js as we want to allow for dynamically changing the templates. Additionally, we will create the possibility to use component-based css (optional). To do so, we are going to provide routes with a new function called \"vueComponents\" to be placed in our frame:\n\n```PHP\nfunction vueComponents($components, $params = []){\n    \/\/ ensure that at least \"base\" is available\n    $params['base'] = base;\n\n    \/\/ iterate through provided component names\n    foreach ($components as $component){\n        $path = path . '\/component\/' . $component . '\/' . $component  . '.ce.';\n\n        \/\/ if template exists, write template to footer\n        if(file_exists($path . $this->viewExt)){\n            $this->footer .= '<template id=\"' . $component . '\">' .\n            $this->fileContent($path . $this->viewExt, $params) . '<\/template>';\n        }\n\n        \/\/ if js exists, write to js stream\n        if(file_exists($path . 'js')){\n            $this->js .= $this->fileContent($path . 'js', $params);\n        }\n\n        \/\/ if stylesheet exists, write to style stream \n        if(file_exists($path . $this->styleExt)){\n            $this->style .= $this->fileContent($path . $this->styleExt, $params);\n        }\n    }\n    return $this;\n}\n```\n\nThis is probable a little confusing. But our plan is to make custom elements vue components that we can load into endpoints with this function.\n","insert_date":"2020-01-19 21:15:14","delete_date":null},{"id":"16EFBFBDEFBFBDEFBFBD3B0311EFBFBD","article_id":"575FEFBFBDEFBFBD3AEFBFBD11EFBFBD","sort":3,"content_type":"markdown","content":"## 3. create cli-templates\n\nThe neoan3 cli-tool generates route components per default to be used with the Unicore. For our setup, we want to directly extend the frame rather than using the Unicore layer. Additionally, we want to have a handy boilerplate for our vue components. To achieve both, we will make use of the template capability of the cli tool. The cli tool respects such templates if they are defined in a folder \"_template\" in our neoan3 app. After creating this folder, we want to create 3 files:\n\n- ce.html \n- ce.js\n- route.php\n\nWith the following content:\n\n_ce.html_\n\n```html\n<div>{{name}}<\/div>\n```\n\n_ce.js_\n\n```JavaScript\nVue.component('{{name}}', {\n    template: document.querySelector('#{{name}}')\n});\n```\n_route.php_\n\n```PHP\n<?php\n\nnamespace Neoan3\\Components;\n\nuse Neoan3\\Frame\\VuePhp;\n\nclass {{name}} extends VuePhp {\n\n    private $loadedComponents = [];\n\n    function init(){\n\n        $this->hook('main', '{{name}}')\n            ->vueComponents($this->loadedComponents)\n            ->output();\n    }\n}\n```\n\nWhat does this do? From now on, whenever we create a new custom element it will generate our vue component boilerplate. And whenever we create a new route component it will generate our setup intended to use these components.\n\n## How to use\n\nLet's try it out. We assume a new endpoint called \"home\":\n\n`neoan3 new component home` and chose \"route component\" using our frame.\n\nNow we generate a new vue component called \"login\":\n\n`neoan3 new component login` and chose \"custom element\"\n\nNext, we open up \"component\/home\/Home.ctrl.php\" and add \"login\" to the array $loadedComponents. (note: in case sensitive environments, please be aware that you additionally have to change the second parameter of \"->hook\" to start with a lower case letter).\n\nNow we open \"component\/home\/home.view.html\" and write the tag \"login\"\n\n`<login><\/login>`\n\nVisiting the endpoint \/home, you should now see the string \"login\". This is the content of \"component\/login\/login.ce.html\" which is used as a template by \"component\/login\/login.ce.js\": Hack away!","insert_date":"2020-01-19 21:31:44","delete_date":null}],"metrics":{"total":766,"unique":752},"has_image":false},{"id":"EFBFBD1C4DEFBFBD32EFBFBD11EFBFBD","name":"MySQL in PHP - how to deal with databases","slug":"my-in-how-to-deal-with-databases","teaser":"How I handle MYSQL database transactions in PHP","image_id":"EFBFBDEFBFBDEFBFBD7132EFBFBD11EF","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"mysql,beginner,php","publish_date":"2020-01-09 15:27:27","insert_date":"2020-01-09 15:27:27","update_date":null,"delete_date":null,"inserted":1578583647000,"image":{"id":"EFBFBDEFBFBDEFBFBD7132EFBFBD11EF","format":"image\/jpeg","path":"\/asset\/upload\/0EC796E5A57611E992F0ECF4BBBEDA10\/5564dd46f0d9e31deb2d90.jpeg","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2020-01-09 13:41:48","delete_date":null},"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[{"id":"EFBFBDEFBFBD742432EFBFBD11EFBFBD","article_id":"EFBFBD1C4DEFBFBD32EFBFBD11EFBFBD","store_key":"dev-to-id","value":"235191","insert_date":"0000-00-00 00:00:00","delete_date":null}],"content":[{"id":"EFBFBD1EEFBFBD7E32EFBFBD11EFBFBD","article_id":"EFBFBD1C4DEFBFBD32EFBFBD11EFBFBD","sort":1,"content_type":"markdown","content":"## Dealing with relational databases\n\nThe most obvious problems beginners have when dealing with relational databases (and MySQL in particular) can be summarized into two main points:\n\n- Database structure\n- Transaction handling and\n\n\nAfter seeing the same habits over and over again on Reddit or Stack***overflow***, it's time to address some basics:\n\n## Database structure\n\nUnfortunately, most learners nowadays start with NoSQL solutions like mongoDB. While there is nothing wrong with handling data that way, experience has shown me that an understanding of relational databases translates well into these solutions while learning relational concepts after working with NoSQL concepts seems to be harder. In order to plan a database structure, one should start with defining relations. We will assume a simple user-model throughout this article that can be visualized like this:\n\n```JSON\n{\n    \"id\":1,\n    \"name\": \"joe1998\",\n    \"emails\": [\n        {\n            \"id\":1,\n            \"email\": \"joe@example.com\",\n            \"confirmation_string\": \"ABCDEFG\",\n            \"confirmed\": true\n        }\n    ]\n}\n```\nIn general, there are the following relations:\n\n- one-2-one\n- one-2-many\n- many-2-many (I will not cover this scenario here. If you are interested, please comment)\n\nThe first thing you notice is that \"emails\" is an array. So emails are one-2-many, meaning that one user can have multiple emails. ***I don't need that!***, you might say, but consider the following scenario: A user wants to change the registered email address. However, when submitting the new email, a typo sneaks into the new email. Your app generates a new entry into emails and sends out a confirmation email including a generated \"confirmation_string\". However, in our scenario, this email never arrives due to the typo. In a worse case, this email could arrive at a different existing mailbox. Whatever happens: we do not want to overwrite the old email. At the very least not until the new one is confirmed. In such a state, the old email must be valid until a new email is confirmed. What does this mean for our database structure? Quite simple: emails need their own table with a relation to a particular user. Without going into foreign keys and types, let's assume the following\n\n_Table ***user***_\n\n| column | key | \n| ---- | ---- |\n| id | primary, auto-increment |\n| name | |\n\n_Table ***user_email***_\n\n| column | key | \n| ---- | ---- |\n| id | primary, auto-increment |\n| user_id | |\n| email | |\n| confirmation_string | |\n| confirmed | |\n\nThese two tables offer the capability to account for every scenario we have talked through before and transactions can be made accordingly. \n\n_NOTE:_ In a real scenario, you might want to equip your tables with standardized columns like \"insert_date\", \"update_date\" and (for soft-deletes) \"delete_date\" for better data-handling and understanding.\n\nSo having these tables set up, how would you go about dealing with data?\n\n## Transaction handling\n\nMany use abstracted transaction handling via an ORM (looking at you, Laravelers). Solutions like Doctrine or Propel are clean solutions as well, but let's be honest: such approaches are hard for beginners and do not foster understanding or learning. This is why people learn how to use PDO or mysqli when starting out. However, this leads to sometimes harmless code-repetition and often dangerous injection possibilities. Therefore, let's use a library that abstracts the danger away without being too complex or too far away from native SQL: [neoan3-db](https:\/\/packagist.org\/packages\/neoan3-apps\/db).\n\nThis library comes with a simplified markup for SQL (called _easy_) which we will ignore here and instead use the identifier \">\" to write classical SQL. But let's not get ahead of ourselves. \n\n### Installation\n\nIn our project folder:\n\n```bash\ncomposer require neoan3-apps\/db\n```\n### Creating a connection\n\n```PHP\nDb::setEnvironment([\n    'name' => 'your_db',\n    'user' => 'root',\n    'password' => 'Som3S3cur3Pa55word'\n])\n```\n_NOTE:_ This class is used statically. There is no need to initiate the connection each time, nor will the function \"setEnvironment\" create a connection. The first time you execute a query a connection will automatically be established should it not exist already. It is therefore possible to place the above snippet on a relatively high level in your application.\n\n### Working with data\n\nNow that our setup is done, let's get the demo-data into the database:\n\n```PHP\n$newUser = [\n    'name' => 'joe1998',\n    'email' => 'joe@example.com'\n];\n\/\/ insert into user *\n\/\/ When auto-incremented ids are used, the function returns the new id\n$newUser['user_id'] = Db::ask('>INSERT INTO user SET name={{name}}', $newUser);\n\/\/ insert into user_email\nDb::ask('>INSERT INTO user_email SET email={{email}}, user_id={{user_id}} confirmation_string = \"ABCDE\"', $newUser);\n```\n_NOTE:_ Please ***always*** use the double curly brackets to refer to a value of a given assoc array by key! Under the hood, the class identifies the correct type and prepares a statement. You can then securely handle user-input.\n\n_* for clarity:_ \nIn the documentation you will find magic methods and a simplified markup. As stated before, we want to keep it very understandable, but the user-insert can also be written like this:\n`$id = Db::user(['name' => 'joe1998'])`","insert_date":"2020-01-09 14:08:56","delete_date":null},{"id":"EFBFBDEFBFBD19EFBFBD32EFBFBD11EF","article_id":"EFBFBD1C4DEFBFBD32EFBFBD11EFBFBD","sort":2,"content_type":"markdown","content":"### Retrieving data\n\nNow you are itching to try out the joins you worked so hard on? You could, but let's remember how our user model is supposed to look like. In order to create a format that is usable (as array) in PHP as well as (as JSON) by the front-end, we decide to use two transactions instead:\n\n```PHP\n\/\/ first we want to row of the targeted user\n$wanted = ['id'=>1];\n$user = Db::ask('>SELECT * FROM user WHERE id = {{id}}', $wanted);\nif(!empty($user){\n    \/\/ The function returns an array of results. Expecting only one result, let's assign the first result to $user\n    $user = $user[0]\n    \/\/ and then attach the email(s)\n    $user['emails'] = Db::ask('>SELECT * FROM user_email WHERE user_id = {{id}}, $wanted]);\n}\n```\nAnd that's it! Our $user will now look like this:\n\n```PHP\n[\n    'id' => 1,\n    'name' => 'joe1998'\n    'emails' => [\n        [\n            'id' => 1,\n            'user_id' => 1,\n            'email' => 'joe@example.com',\n            ...\n        ]\n    ]\n]\n```\nand can easily be passed to the front-end with \"json_encode()\"\n\n## Conclusion\nThere is a lot to be said when it comes to abstraction, using uuids, migration etc, but I hope this is a good starting point. If you have any questions, please don't hesitate to ask.","insert_date":"2020-01-09 15:20:56","delete_date":null}],"metrics":{"total":590,"unique":583},"has_image":true},{"id":"0A420B072BEFBFBD11EFBFBD0C0AEFBF","name":"Install PHP 7.4 on Ubuntu","slug":"install-on-ubuntu","teaser":"Finally PHP 7.4 is out! You have read about the new features, you have followed externals, you have gathered ideas on how new capabilities will save time. Let's get it running.","image_id":null,"author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"php,ubuntu","publish_date":"2019-12-31 15:22:52","insert_date":"2019-12-31 15:22:52","update_date":null,"delete_date":null,"inserted":1577805772000,"image":[],"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[{"id":"0AEFBFBDEFBFBD7B2BEFBFBD11EFBFBD","article_id":"0A420B072BEFBFBD11EFBFBD0C0AEFBF","store_key":"dev-to-id","value":"229370","insert_date":"0000-00-00 00:00:00","delete_date":null}],"content":[{"id":"0A4315EFBFBD2BEFBFBD11EFBFBD0C0A","article_id":"0A420B072BEFBFBD11EFBFBD0C0AEFBF","sort":1,"content_type":"markdown","content":"## What's new?\nThere are countless articles about the changes php7.4 brings. Feel free to get an overview [here](https:\/\/dev.to\/pushkaranand\/upgrading-to-php-7-4-26dg).\n\n## Installation\n\nRegardless of whether you want to upgrade or install, let's first adhere to the general recommendation you will find anywhere. Namely, make sure we are up to date: `sudo apt-get update`.\n\nThen, we want to add Ondrej Sury's repository:\n\n```shell\nsudo apt -y install software-properties-common\nsudo add-apt-repository ppa:ondrej\/php\nsudo apt-get update\n```\n\nNow we are ready to install php 7.4. \n```shell\nsudo apt -y install php7.4\n```\n\nYou might want to test the success with `php -v`, which will give you an output about the version.\n\n## Extensions\n\nI don't know which extensions you might need, but the format is very intuitive and with the example of mbstring looks like this:\n\n```shell\nsudo apt-get install php7.4-mbstring\n```\n***Tip: you can install multiple extensions with the following format:***\n\n```shell\nsudo apt-get install -y php7.4-{mbstring,mysql}\n```\n\n_NOTE_: We are happy with the shipped Apache here, but be sure to install php7.4-fpm if you are aiming for NGINX after stopping apache `sudo systemctl disable --now apache2`\n\n### Old installations\n\nIn the case of former installations, you will want to purge the old version of php (assuming php 7.3):\n\n`sudo apt purge php7.3 libapache2-mod-php7.3`\n\n","insert_date":"2019-12-31 14:37:15","delete_date":null}],"metrics":{"total":2272,"unique":826},"has_image":false},{"id":"EFBFBD7F74EFBFBDEFBFBD1C11EFBFBD","name":"How to install global npm packages without sudo on Ubuntu ","slug":"how-to-install-global-npm-packages-without-sudo-on-ubuntu","teaser":"Running npm on a server can be painful. Privileges are there for a reason, and so is sudo. Running npm with sudo is not the solution.","image_id":null,"author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"npm,ubuntu,aws","publish_date":"2019-12-31 14:00:58","insert_date":"2019-12-31 14:00:58","update_date":null,"delete_date":null,"inserted":1577800858000,"image":[],"rating":{"total":1,"average":"5.0000"},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[{"id":"EFBFBDEFBFBDEFBFBDEFBFBD417811EF","article_id":"EFBFBD7F74EFBFBDEFBFBD1C11EFBFBD","user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","parent_id":null,"comment":"As some have pointed out on various platforms: You might need to apply the changes. To do so: . ~\/.bashrc   (or . ~\/.profile if the file exists)","insert_date":"2020-01-28 02:47:44","delete_date":null}],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[{"id":"6BEFBFBD02682BEFBFBD11EFBFBD0C0A","article_id":"EFBFBD7F74EFBFBDEFBFBD1C11EFBFBD","store_key":"dev-to-id","value":"229247","insert_date":"0000-00-00 00:00:00","delete_date":null}],"content":[{"id":"6B30EFBFBD372BEFBFBD11EFBFBD0C0A","article_id":"EFBFBD7F74EFBFBDEFBFBD1C11EFBFBD","sort":1,"content_type":"markdown","content":"# Avoiding sudo\n\nIt should be self-evident that providing your scripts sudo permissions is a bad idea. From concerns about third-party packages, missing security layers in your code to access issues and inconveniences - it would be too much to talk about the possible dangers. Let's just agree that running via sudo is not an option. \n\nOne of my most-used utilities is [neoan3-cli](https:\/\/www.npmjs.com\/package\/neoan3-cli). Even if I am not using neoan3, the migration and credential handling is always welcome. \n\n## AWS Ubuntu instance\n\nOne of the most versatile hosting solutions is still Amazon's EC2 instances. While Amazon's Linux version seems to be the logical step, I am simply feeling more at ease with Ubuntu and am frankly a little skeptical about a distro that seems so coupled with a hosting solution (As far as I understand, the distro started out as a customization of CentOS and then branched into its own beast). Ubuntu is the perfect solution as everything we are going to talk about will be independent from your hosting solution. We are using version 18.04 but there shouldn't be any differences to prior versions in our scenario. \n\n_NOTE:_ On AWS your username will likely be \"ubuntu\" in our scenario.\n\n## The directory of global npm packages\n\nThe first thing we want to do is creating a directory within our user's home. On Ubuntu, this should be `\/home\/USERNAME\/` ( or `~\/`). We will want to create a directory for our global packages:\n\n```shell\nmkdir ~\/.npm-packages\n```\n\nNext, let's set up npm to use this directory:\n\n```shell\nnpm config set prefix \"${HOME}\/.npm-packages\"\n```\n\n## PATH variable\nIn order for node & npm to find installed packages, we should add this directory to the PATH variable. On a server you might want to do this via `nano ~\/.bashrc`.\n\nAdd the following lines:\n\n```shell\nNPM_STORE=\"${HOME}\/.npm-packages\"\n\nexport PATH=\"$PATH:$NPM_STORE\/bin\"\n\n# Make sure this line is the last in the config (in case you defined MANPATH already)\n# Otherwise, fall back to `manpath` so we can inherit from `\/etc\/manpath`.\nexport MANPATH=\"${MANPATH-$(manpath)}:$NPM_STORE\/share\/man\"\n```\n## Let's try it out\n\n Assuming everything went as planned, we should now be able to use global packages without the root user or sudo. Start a new terminal window (or restart your ssh connection) and try: `npm i -g neoan3-cli`. After successful installation, the command `neoan3 -v` should output the installed version. \n\n## Final thoughts\n\nThere is a popular script out there automating this process [here](https:\/\/github.com\/glenpike\/npm-g_nosudo). Please be aware that this solution does not play well with node version manager. Otherwise it is a solid solution with many happy users.","insert_date":"2019-12-31 09:46:29","delete_date":null}],"metrics":{"total":2243,"unique":2017},"has_image":false},{"id":"19EFBFBD0D23190111EFBFBD0C0AEFBF","name":"Static content pages - still the fastest web-experience","slug":"static-content-pages-still-the-fastest-web-experience","teaser":"Tutorial: How to utilize blua.blue to generate static content for your website.","image_id":"EFBFBDEFBFBDEFBFBD7118EFBFBD11EF","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"php,cms,static pages","publish_date":"2019-12-07 16:41:49","insert_date":"2019-12-07 16:41:49","update_date":null,"delete_date":null,"inserted":1575736909000,"image":{"id":"EFBFBDEFBFBDEFBFBD7118EFBFBD11EF","format":"image\/jpeg","path":"\/asset\/upload\/0EC796E5A57611E992F0ECF4BBBEDA10\/3e7b75acdb35fc76865dda.jpeg","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2019-12-07 14:36:37","delete_date":null},"rating":{"total":1,"average":"5.0000"},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[{"id":"1A41EFBFBD190111EFBFBD0C0AEFBFBD","article_id":"19EFBFBD0D23190111EFBFBD0C0AEFBF","store_key":"dev-to-id","value":"216647","insert_date":"0000-00-00 00:00:00","delete_date":null}],"content":[{"id":"19EFBFBDEFBFBDEFBFBD190111EFBFBD","article_id":"19EFBFBD0D23190111EFBFBD0C0AEFBF","sort":1,"content_type":"html","content":"<p>In the constant battle of visibility, SEO and speed are important factors. Too often do we neglect these points due to our love for the dynamic web, slick SPAs and client-heavy gimmicks. Next to accessibility, static pages solve for many of these problems while our static site generators are usually monsters of their own.<\/p>\n<p>Today, let's look at a \"micro generator\" that helps us to manage content dynamically while delivering static HTML pages.<\/p>\n<p>Video-version of this tutorial: YouTube<\/p>\n<h2>The concept<\/h2>\n<p>The idea is rather simple: let's use the webhook capability of a headless CMS (here <a title=\"go to blua.blue\" href=\"..\/\" target=\"_blank\" rel=\"noopener\">blua.blue<\/a>) to receive content and write\/update static HTML files. Next to what we want to achieve, this is a solution for additional challenges:<\/p>\n<p>&nbsp;- it enables us to omit any API necessities<\/p>\n<p>&nbsp;- it enables us to run our CMS locally or within a private network<\/p>\n<p>In this POC, we will use the following folder structure<\/p>\n<p>\/assets\/<\/p>\n<p>\/assets\/template.html<\/p>\n<p>&nbsp;\/assets\/menu.json (not used in the article, but in the video and gist)<\/p>\n<p>\/assets\/script.js (not used in the article, but in the video and gist)<\/p>\n<p>&nbsp;\/assets\/style.css<\/p>\n<p>\/blog\/<\/p>\n<p>receiver.php<\/p>\n<p>.htaccess (if apache)<\/p>\n<p>&nbsp;<\/p>","insert_date":"2019-12-07 14:51:50","delete_date":null},{"id":"556817EFBFBD190A11EFBFBD0C0AEFBF","article_id":"19EFBFBD0D23190111EFBFBD0C0AEFBF","sort":2,"content_type":"html","content":"<div class=\"video-container\"><iframe src=\"\/\/www.youtube.com\/embed\/Mw2YqB83KKI\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/div>","insert_date":"2019-12-07 15:57:56","delete_date":null},{"id":"EFBFBDEFBFBDD8BC190311EFBFBD0C0A","article_id":"19EFBFBD0D23190111EFBFBD0C0AEFBF","sort":3,"content_type":"html","content":"<h2>Preparing the CMS<\/h2>\n<p>For development reasons (when you develop locally, you will find yourself having trouble sending webhooks to localhost), I installed blua.blue locally. However, you can develop online (e.g. via FTP) to avoid a bigger setup. Whatever the case, setup your headless CMS to send webhooks to your endpoint. In my case, that was http:\/\/localhost\/static-blog\/receiver.php and using a baerer token for security.<\/p>\n<p><strong>Tip 1:<\/strong><\/p>\n<p>In blua.blue, you can set webhooks in \"Manage\" -&gt; \"API\"<\/p>\n<p><strong>Tip 2:<\/strong><\/p>\n<p>When using Apache, be sure to include the following in your .htaccess<\/p>\n<pre><code>\nRewriteEngine On\nRewriteCond %{HTTP:Authorization} ^(.*)\nRewriteRule .* - [e=HTTP_AUTHORIZATION:%1]\n<\/code><\/pre>","insert_date":"2019-12-07 15:09:59","delete_date":null},{"id":"40EFBFBD0379190811EFBFBD0C0AEFBF","article_id":"19EFBFBD0D23190111EFBFBD0C0AEFBF","sort":4,"content_type":"html","content":"<h2>&nbsp;<\/h2>\n<h2>receiver.php<\/h2>\n<p>Our receiver should account for the following tasks:<\/p>\n<p>1. Validate calls to ensure the received call is legitimate<\/p>\n<p>2. Account for various events (create, update etc)<\/p>\n<p>3. Write\/update static pages<\/p>\n<p>4. Generate a menu<\/p>\n<p>&nbsp;<\/p>\n<p>Let's start:<\/p>\n<p>First, let's create our class that we can later initiate with <code>new Receiver('our-webhook-secret');<\/code><\/p>\n<pre class=\"language-php\"><code>class Receiver\n{\n   \n    function __construct($mySecret)\n    {\n        if (isset($_SERVER['HTTP_AUTHORIZATION']) &amp;&amp; substr($_SERVER['HTTP_AUTHORIZATION'], 7) == $mySecret) {\n            \/\/ valid call -&gt; do things\n        }\n    }\n}<\/code><\/pre>\n<p>Next, we want want to grab the payload of the call:<\/p>\n<pre class=\"language-php\"><code>    private $data;\n    private function fetchData()\n    {\n        $data = file_get_contents('php:\/\/input');\n        if (!empty($data)) {\n            $this-&gt;data = json_decode($data, true);\n        }\n    }<\/code><\/pre>\n<p>We now have the data available as associative array in the property $data. At this point, we should know that the blua.blue call is structured like this:<\/p>\n<pre class=\"language-javascript\"><code>{\n    \"event\": \"created\",\n    \"payload\": {\n        \"name\": \"article-name\",\n        ...\n        \"content\": [\n            {\n                ...\n                \"content\": \"&lt;p&gt;Content&lt;\/p&gt;\"\n            }\n        ],\n        ...\n    }\n}<\/code><\/pre>\n<p>So let's make sure we have that information available in our instance and create a switch-case for the possible events<br \/>&nbsp;<\/p>\n<p>- created<\/p>\n<p>- updated<\/p>\n<p>- deleted<\/p>\n<p>in our constructor:<\/p>\n<pre class=\"language-php\"><code>function __construct($mySecret)\n    {\n        if (isset($_SERVER['HTTP_AUTHORIZATION']) &amp;&amp; substr($_SERVER['HTTP_AUTHORIZATION'], 7) == $mySecret) {\n            $this-&gt;fetchData();\n            switch ($this-&gt;data['event']) {\n                case 'created':\n                case 'updated':\n                    \/\/ here, let's write to a file\n                    $this-&gt;writeToFile();\n                    break;\n                case 'deleted':\n                    break;\n            }\n\n        }\n    }<\/code><\/pre>\n<p>You might wonder about the method \"writeToFile\" as we don't have it yet. but first, we need to account for two prerequisites:<\/p>\n<p>- template-rendering<\/p>\n<p>- template<\/p>\n<p>Using composer, let's include neoan3-apps\/ops (<code>composer require neoan3-apps\/ops<\/code>) and remember that we need the autoloader available (<code>require_once __DIR__ . '\/vendor\/autoload.php';<\/code>) in our receiver.<\/p>\n<p>For now, the template is a primitive HTML file in \/assets\/template.html<\/p>\n<pre class=\"language-markup\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;[[name]]&lt;\/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"..\/assets\/style.css\"&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n&lt;div class=\"container\" id=\"blog\"&gt;\n    &lt;blog-menu&gt;\n        &lt;ul&gt;\n            &lt;li n-for=\"links as link\"&gt;\n                &lt;a href=\"[[link.link]]\"&gt;[[link.name]]&lt;\/a&gt;\n            &lt;\/li&gt;\n        &lt;\/ul&gt;\n    &lt;\/blog-menu&gt;\n    &lt;h1&gt;[[name]]&lt;\/h1&gt;\n    &lt;div class=\"content-part\" n-for=\"content as contentPart\"&gt;\n        [[contentPart.content]]\n    &lt;\/div&gt;\n&lt;\/div&gt;\n&lt;\/body&gt;\n&lt;\/html&gt;<\/code><\/pre>\n<p><strong>Ups... blua.blue and dev.to have some issues with parsing this template. The hard brackets should be curlys!<\/strong><\/p>\n<p>The markup should be intuitive, but feel free to head over to the documentation at: https:\/\/packagist.org\/packages\/neoan3-apps\/ops<\/p>\n<p>&nbsp;<\/p>\n<p>Finally, let's address our missing function:<\/p>\n<pre class=\"language-php\"><code>private function writeToFile()\n    {\n        \/\/ let's ignore the article if it is a draft\n        if ($this-&gt;data['payload']['publish_date']) {\n            \/\/ account for \\Neoan3\\Apps\\Ops routing\n            if(!defined('path')){\n                define('path', __DIR__);\n            }\n            $destination = path . '\/blog\/' . $this-&gt;data['payload']['slug'] . '.html';\n            $content = \\Neoan3\\Apps\\Ops::embraceFromFile('assets\/template.html', $this-&gt;data['payload']);\n            file_put_contents($destination , $content);\n        }\n    }<\/code><\/pre>\n<p>That's it! We can now generate our first static article by using the blua.blue backend.<\/p>\n<p>Now, there is a lot of functionality missing (like delete, menu etc.). Some of it is addressed in the video and you can find a little more advanced version here: https:\/\/gist.github.com\/sroehrl\/c81a1d90a8db87b55307ea7f791c1de7<\/p>","insert_date":"2019-12-07 15:43:02","delete_date":null}],"metrics":{"total":672,"unique":652},"has_image":true},{"id":"EFBFBD043813EFBFBD11EFBFBD0C0AEF","name":"blua.blue PHP SDK","slug":"blua-blue-sDK","teaser":"Create your own blog.","image_id":"483709EFBFBD137F11EFBFBD0C0AEFBF","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"blog,php","publish_date":"2019-11-30 15:59:24","insert_date":"2019-11-30 15:59:24","update_date":null,"delete_date":null,"inserted":1575129564000,"image":{"id":"483709EFBFBD137F11EFBFBD0C0AEFBF","format":"image\/jpeg","path":"\/asset\/upload\/0EC796E5A57611E992F0ECF4BBBEDA10\/3113a9267981489d253c2f.jpeg","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2019-11-30 14:39:58","delete_date":null},"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[{"id":"EFBFBD2BEFBFBDEFBFBD13EFBFBD11EF","article_id":"EFBFBD043813EFBFBD11EFBFBD0C0AEF","store_key":"dev-to-id","value":"213277","insert_date":"0000-00-00 00:00:00","delete_date":null}],"content":[{"id":"EA95916B13EFBFBD11EFBFBD0C0AEFBF","article_id":"EFBFBD043813EFBFBD11EFBFBD0C0AEF","sort":1,"content_type":"markdown","content":"## What is blua.blue?\n\nDubbed a \"Content Enablement Platform\", blua.blue is an open source CMS with the capabilities to be used as \n\n- hybrid\n- headless\n- decoupled or\n- coupled CMS\n\nIn our scenario, we are using it as headless CMS and build a simple personal blog.\n\n## Preparation\n\nWhen we grow, we will want to run our own installation of blua.blue. For now, registering [here](https:\/\/blua.blue\/register\/) will be enough. In order to test our blog, let's write a sample post. The things we want to ensure for now are \n- unchecking the \"Appear in search & make public\" checkbox and\n- using \"WYSIWYG (HTML)\" as content type ( dropdown choice when clicking \"add new content\")\n\nOnce this is done, let's jump to our IDE\n\n## Install the PHP SDK\n\nUsing composer, we install the PHP SDK for blua.blue\n\n`composer require blua-blue\/blua-blue-php-sdk`\n\nand then our templating:\n\n`composer require neoan3-apps\/ops`\n\n## Our blog setup\n\nOur project will consist of only two templates and one PHP file:\n\n_templates\/overview.html_\n\n_templates\/article.html_\n\n_index.php_\n\nThe overview HTML template can look however you want to. For now, I will start as simple as this:\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>My blog<\/title>\n<\/head>\n<body>\n    <div n-for=\"articles as article\">\n        <a href=\"index.php?article={%7Barticle.slug}}\">{%7Barticle.name}}<\/a>\n    <\/div>\n<\/body>\n<\/html>\n```\nNote how we use two things you might notice:\n*n-for* will iterate over articles for us while the curly braces substitute values for us just like in many other concepts you might be familiar with.\n\nIn order to better understand this, let's look at our initial index.php\n\n```PHP\n<?php\n\n\/\/ required for Ops\ndefine('path', __DIR__);\n\nrequire path . '\/vendor\/autoload.php';\n\n\/\/ use your own credentials\n$userName = 'demo';\n$password = 'sampleUser1';\n\n\/\/ initiate SDK\n$client = new \\BluaBlue\\Client($userName, $password);\n\n\/\/ render overview.html with article list\n\necho \\Neoan3\\Apps\\Ops::embraceFromFile('templates\/overview.html',[\n    'articles' => $client->getArticleList(0,300,$userName)\n]);\n```\n\nWe should already have output at this point. However, as indicated by the links in our template, we should probably account for the GET parameter \"article\" to be set or not. Let's first create a simple article template:\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{%7Bname}}<\/title>\n<\/head>\n<body>\n\n<h1>{%7Bname}}<\/h1>\n<p n-for=\"content as part\">\n    {%7Bpart.content}}\n<\/p>\n<\/body>\n<\/html>\n```\nand then add the rendering option to our index.php\n\n```PHP\nif(isset($_GET['article'])){\n    \/\/ render article page\n   $article = $client->getArticle($_GET['article']);\n    echo \\Neoan3\\Apps\\Ops::embraceFromFile('templates\/article.html', $article );\n}\n```\n\nOur complete index.php could look something like this:\n\n```PHP\n<?php\n\n\/\/ required for Ops\ndefine('path', __DIR__);\n\nrequire path . '\/vendor\/autoload.php';\n\n\/\/ use your own credentials\n$userName = 'demo';\n$password = 'sampleUser1';\n\n\/\/ initiate SDK\n$client = new \\BluaBlue\\Client($userName, $password);\n\nif(isset($_GET['article'])){\n    \/\/ render article page\n    echo \\Neoan3\\Apps\\Ops::embraceFromFile('templates\/article.html', $client->getArticle($_GET['article']));\n} else {\n    \/\/ render overview.html with article list\n    echo \\Neoan3\\Apps\\Ops::embraceFromFile('templates\/overview.html',[\n        'articles' => $client->getArticleList(0,300,$userName)\n    ]);\n}\n```\n\nAnd that's it. You can now start designing, creating menus and improve on what we have. ","insert_date":"2019-11-30 15:56:05","delete_date":null}],"metrics":{"total":737,"unique":727},"has_image":true},{"id":"79EFBFBDEFBFBD2A065D11EFBFBD0C0A","name":"dev.to plugin for headless CMS blua.blue (part 2)","slug":"dev-to-plugin-for-headless-blua-blue-part","teaser":"A solution to supplying plugins to blua.blue","image_id":"2801EFBFBDEFBFBD065D11EFBFBD0C0A","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"EFBFBD290421DBB211EFBFBD4BEFBFBD","is_public":1,"keywords":"dev.to,cms,php,webdev","publish_date":"2019-11-15 00:16:20","insert_date":"2019-11-15 00:24:57","update_date":null,"delete_date":null,"inserted":1573777497000,"image":{"id":"2801EFBFBDEFBFBD065D11EFBFBD0C0A","format":"image\/jpeg","path":"\/asset\/upload\/0EC796E5A57611E992F0ECF4BBBEDA10\/8a7d76274653881047d395.jpeg","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2019-11-13 21:32:56","delete_date":null},"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"EFBFBD290421DBB211EFBFBD4BEFBFBD","name":"Blog","insert_date":"2019-09-20 14:27:57","delete_date":null},"store":[{"id":"5ADF86EFBFBD073E11EFBFBD0C0AEFBF","article_id":"79EFBFBDEFBFBD2A065D11EFBFBD0C0A","store_key":"dev-to-id","value":"205662","insert_date":"0000-00-00 00:00:00","delete_date":null}],"content":[{"id":"79EFBFBD346F065D11EFBFBD0C0AEFBF","article_id":"79EFBFBDEFBFBD2A065D11EFBFBD0C0A","sort":1,"content_type":"html","content":"<h2>Recap<\/h2>\n<p>As elaborated in the article \"Cross publishing to dev.to\" (<a href=\"https:\/\/dev.to\/sroehrl\/cross-publishing-to-dev-to-34g5\">on dev.to<\/a> || <a href=\"..\/article\/cross-publishing-to-dev-to\/\">on blua.blue<\/a>), I created a plugin for blua.blue that cross posts to dev.to by utilizing the webhook functionality of blua.blue. I did this as a proof of concept of how to build custom plugins for blua.blue in general.<\/p>\n<p>While the general approach was proven, I had outstanding problems to tackle, while allowing for the folowing rules:<\/p>\n<p>- modifications to blua.blue's models &amp; functionality are out of the question to stay future proof<\/p>\n<p>- saving credentials as plain-text in the MySQL database is not an option<\/p>\n<p>- somehow prohibit public access while not having a JWT from the user present in the webhooks<\/p>\n<h2>Outstanding problems<\/h2>\n<p>So, what where the remaining issues? Well, first of all, having the API key as server-side credentials only enabled one dev.to user-account. That is a big problem considering that a multi-user system should enable anyone with a user account to post as individual author using an individual user account. Letting people publish in my name was certainly not an option. Blua.blue has the ability to set tokens that are transmitted with the webhooks as bearer tokens. However, these tokens are stored in plain text and are intended to provide identification of the origin of a call, not to securely store credentials. So what to do?<\/p>\n<h2>The principle<\/h2>\n<p>So here is the solution I came up with: I would create an endpoint as a route for setup purposes. There you can input your API-key and send it to the plugin where a instance-specific encryption-key ( outside the public web-root via `neoan3 credentials`&nbsp; ) would encrypt and serialize it.<\/p>\n<p>In a second step, the result of this operation is then provided as token to the webhook pointing at the plugin and stored in the database.&nbsp;<\/p>\n<p>Whenever the plugin receives a call it can now revert this operation ( deserialize &amp; decrypt ) and use the result (the plain API-key) for communication with dev.to, at which point the dev.to API will either recognize the user and authentication or not.<\/p>\n<p>Since the POST-endpoint is used by the webhook and I wanted to contain the plugin to one component, I used this GET function:<\/p>\n<pre class=\"language-php\"><code>function getDevTo(array $body = [])\n    {\n        \/\/ make sure only logged in users can execute this\n        Stateless::restrict();\n        $answer = [];\n        if (isset($body['apiKey'])) {\n            \/\/ assign\n            $this-&gt;apiKey = $body['apiKey'];\n            \/\/ use existing header construction\n            $header = $this-&gt;curlHeader();\n            \/\/ make a test-call with given API key to provide feedback for the frontend\n            $testAnswer = Curl::curling('https:\/\/dev.to\/api\/articles\/me',[],$header, 'GET');\n            \/\/ obtain neoan3 credentials\n            $credentials = getCredentials();\n            $key = $credentials['blua_devto']['salt'];\n            \/\/ encrypt &amp; serialize\n            $encrypted = Ops::serialize(Ops::encrypt($body['apiKey'], $key));\n            $answer = ['token' =&gt; $encrypted, 'test' =&gt; $testAnswer];\n        }\n\n        return $answer;\n    }<\/code><\/pre>\n<p>In order to retrieve the API key, I had to make changes to the POST function as well:<\/p>\n<pre class=\"language-php\"><code>function postDevTo(array $body)\n    {\n        try {\n            $credentials = getCredentials();\n            \/\/ check token\n            if (!isset($_SERVER['HTTP_AUTHORIZATION'])) {\n                return ['webhook' =&gt; 'denied'];\n            }\n\n            $this-&gt;apiKey = $this-&gt;getApiKey($credentials, substr($_SERVER['HTTP_AUTHORIZATION'], 7));\n\n\n            switch ($body['event']) {\n                case 'created':\n                case 'updated':\n                    \/\/ find existing\n                    $update = $this-&gt;investigateStoreObject($body['payload']['store']);\n                    $devBody = $this-&gt;transformPayload($body['payload']);\n                    $this-&gt;sendToDevTo($devBody, $update);\n                    break;\n                case 'deleted':\n                    break;\n            }\n        } catch (\\Exception $e) {\n            throw new RouteException('Unable to execute dev.to plugin', 500);\n        }\n        return ['webhook' =&gt; 'received'];\n    }<\/code><\/pre>\n<p>I uploaded the changes to blua.blue and here I am using it!<\/p>\n<p>GitHub: https:\/\/github.com\/blua-blue\/devTo<\/p>\n<h2>Want to try it out?<\/h2>\n<p>Sign up at https:\/\/blua.blue and then visit https:\/\/blua.blue\/dev-to for the setup.<\/p>","insert_date":"2019-11-13 21:35:13","delete_date":null}],"metrics":{"total":612,"unique":609},"has_image":true},{"id":"EFBFBD3D07EFBFBD04EFBFBD11EFBFBD","name":"Cross publishing to dev.to","slug":"cross-publishing-to-dev-to","teaser":"How to publish your content to dev.to from blua.blue - hopefully","image_id":"62EFBFBD2E6B13EFBFBD11EFBFBD0C0A","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"dev.to,api,php","publish_date":"2019-11-11 20:23:16","insert_date":"2019-11-30 18:51:20","update_date":null,"delete_date":null,"inserted":1575139880000,"image":{"id":"62EFBFBD2E6B13EFBFBD11EFBFBD0C0A","format":"image\/jpeg","path":"\/asset\/upload\/0EC796E5A57611E992F0ECF4BBBEDA10\/b283704e291152c2b6f68f.jpeg","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2019-11-30 18:51:15","delete_date":null},"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[],"content":[{"id":"EFBFBD3EEFBFBD7904EFBFBD11EFBFBD","article_id":"EFBFBD3D07EFBFBD04EFBFBD11EFBFBD","sort":1,"content_type":"html","content":"<h2>O brother where art thou?<\/h2>\n<p>I don't know where you will read this, but I would like to tell the story about how this very content came about.<\/p>\n<p>Right now, I am writing in the editor of <a href=\"..\/\">blua.blue<\/a> trying out the dev.to plugin I wrote. If everything goes to plan, you will read this post as a guide on what I did while at the same time it is the first live test of the functionality itself.<\/p>\n<h2>A little backstory<\/h2>\n<p>Blua.blue is a project facillitating content distribution as a hybrid CMS capable of<\/p>\n<p>- decoupled CMS<\/p>\n<p>- coupled CMS<\/p>\n<p>- headless CMS<\/p>\n<p>This effectively means that it ships with a frontend, a RESTful API and webhooks. What it can't do is formatting the webhook in order to target particular APIs. As with all headless CMS' it expects the endpoints to be under the control of whoever wants to publish content at a certain website or app. Unfortunately, this is simply not the case with dev.to ( At least right now, dear dev.to team: with the successful funding round in mind, do you need any additional developers? ).<\/p>\n<h2>The solution<\/h2>\n<p>The idea is pretty simple: what if a plugin received the webhook, transformed the request according to the api specs of dev.to and then sends it on?<\/p>\n<p><strong>blua.blue ---&gt; webhook to blua.blue\/dev-to ---&gt; dev.to<\/strong><\/p>\n<p>The prerequisites are quite simple, I needed to convert html into markdown ( shoutout to \"the league\"&nbsp;&nbsp;<a href=\"https:\/\/github.com\/thephpleague\/html-to-markdown\">https:\/\/github.com\/thephpleague\/html-to-markdown <\/a>) and then simply restructure the blua.blue payload to the dev.to format. But three things bothered me. First, I did not want to rely on the events of blua.blue (created, updated, deleted) as I wanted to acount for edge cases (like what if you install the plugin to your blua.blue instance and update articles that exist there but not yet on dev.to). The second problem was finding a way to reliably match articles on blua.blue with articles on dev.to. Thankfully, the article object of blua.blue contains a store object where I could simply save the dev.to ID. This solves for both of the problems as I know now&nbsp;<\/p>\n<p>a) which article is already exists at dev.to ( and therefore needs to be updated rather than created ) and&nbsp;<\/p>\n<p>b) how to reliably identify the relationship between the blua.blue ID and the dev.to ID.<\/p>\n<p><strong>But what about security?<\/strong> The last problem was that I effectively created an endpoint where anybody can send an object in the right format to the plugin endpoint and that object will be published to dev.to in my name. Well, when setting up the webhooks in blua.blue, I have the ability to set up a token. So for now, I use a combination of the `neoan3 credentials` operation and the token to ensure that only my articles are processed. But of course, this means that this plugin can only be used by one user of the blua.blue installation (here me).<\/p>\n<p>In order to securly facilitate plugin use like this changes to the way blua.blue stores tokens needs to be revisited, and as usual, help is appreciated (<a href=\"https:\/\/github.com\/blua-blue\/blua-blue\">https:\/\/github.com\/blua-blue\/blua-blue<\/a>). However, a good solution would go a long way as it opens up the possibility for a wide range of self-contained plugins for blua.blue.<\/p>\n<p>&nbsp;<\/p>\n<p>If you are interested in the progress:&nbsp;<a href=\"https:\/\/github.com\/blua-blue\/devTo\">https:\/\/github.com\/blua-blue\/devTo<\/a><\/p>","insert_date":"2019-11-11 20:19:22","delete_date":null}],"metrics":{"total":668,"unique":656},"has_image":true},{"id":"EFBFBDEFBFBDEFBFBDEFBFBDEFBFBD46","name":"Transformer - falling in love with PHP's magic methods all over again","slug":"transformer-falling-in-love-with-magic-methods-all-over-again","teaser":"PHP's magic functions have been around for a long time. But there were always good reasons to avoid them. Transformer is a practical and reliable way to make use of the most common operations we program: CRUD operations.","image_id":null,"author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"php,crud,c.r.u.d,mysql,lamp,neoan3,tutorial,mvc,model handling","publish_date":"2019-09-19 22:01:03","insert_date":"2019-11-30 18:31:30","update_date":null,"delete_date":null,"inserted":1575138690000,"image":[],"rating":{"total":2,"average":"4.5000"},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[{"id":"2BEFBFBD75EFBFBDEFBFBDEFBFBD11EF","article_id":"EFBFBDEFBFBDEFBFBDEFBFBDEFBFBD46","user_id":"5FEFBFBDEFBFBDEFBFBDEFBFBDEFBFBD","parent_id":null,"comment":"It should be noted that auto-loading prior to neoan3 v0.0.2 does not load transformer-files.\nWhen working with older versions, you need to require the model's transformer in the model-file itself.","insert_date":"2019-09-20 20:21:04","delete_date":null}],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[],"content":[{"id":"EFBFBD002701EFBFBD4611EFBFBD4BEF","article_id":"EFBFBDEFBFBDEFBFBDEFBFBDEFBFBD46","sort":1,"content_type":"html","content":"<div style=\"min-height: 460px;\"><iframe style=\"height: 460px;\" src=\"\/\/www.youtube.com\/embed\/yFp2_SCXc9o\" width=\"100%\" height=\"460\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/div>\n<p style=\"text-align: right;\"><a href=\"https:\/\/github.com\/sroehrl\/crud-transformer-video\" target=\"_blank\" rel=\"noopener\">https:\/\/github.com\/sroehrl\/crud-transformer-video<\/a><\/p>\n<h2>MVC (or at least the idea) is still one of the most relevant patterns<\/h2>\n<p>Implementations reach from very strickt to very loose definitions. But some things are always true: You will write reusable models for every available entity type. This always leads to transactions with a persistent storage (aka database) and the old four letters C.R.U.D - Create Read Update Delete will make the majority of your work. And some things have to be custom, right? I mean, every project has its own ruleset of what happens when what kind of data gets updated, how to validate certain inputs, what to trigger on deletion. Well, what if your model was just that,<\/p>\n<h2>A ruleset that defines how CRUD works - and nothing else.<\/h2>\n<p>neoan3 has automated routing, why would it stop at models? The challenge with abstraction is always the same: how to simplify without taking away <strong>any<\/strong> freedom? Removing the index-model from the core, updating the autoloader and providing the <a href=\"https:\/\/github.com\/sroehrl\/neoan3-transformer\" target=\"_blank\" rel=\"noopener\">transformer-app<\/a> as well as enhancing the cli-tool did the trick.<\/p>\n<p>All you need to to is to update your neoan3-cli and you are ready to go.<\/p>\n<p>So, what is the typical application flow? In theory, nothing changed. You will likely receive requests via API endpoints you didn't have to write routing for, you will authorize the call and call the model to retrieve, update, delete or create entities and return a result. The only difference is, your complete code for a particular endpoint could look like this:<\/p>\n<pre class=\"language-php\"><code>&lt;?php\n\nnamespace Neoan3\\Components;\n\nuse Neoan3\\Apps\\Stateless;\nuse Neoan3\\Model\\TaskModel;\n\nclass Task extends Demo\n{\n\n    function getTask(array $body)\n    { \n        return $this-&gt;executeTransformer('find', $body);\n    }\n\n    function postTask(array $body)\n    {\n        return $this-&gt;executeTransformer('create', $body);\n    }\n\n    function updateTask(array $body)\n    {\n         return $this-&gt;executeTransformer('update', $body);\n    }\n\n    private function executeTransformer($function, $body)\n    {\n        Stateless::restrict();\n        return TaskModel::$function($body);\n    }\n}<\/code><\/pre>\n<h2>The good, the bad, the ugly<\/h2>\n<p>You will be pleased to hear that this time test-coverage was 100% before publishing a version. But documentation is still a huge problem and will require some additional time. We would be pleased to see volunteers jump at us, but I know you guys aren't sitting around bored at home either. As a start, this video should give you first insight into what the potential is and how this will further enhance your development speed.<\/p>","insert_date":"2019-09-20 01:34:36","delete_date":null}],"metrics":{"total":531,"unique":527},"has_image":false},{"id":"1034EFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"The Uselessness of Pre-Assessment","slug":"the-uselessness-of-pre-assessment","teaser":"After almost two decades in the industry, new jobs will still ask you for \"assessment tests\". A little rant...","image_id":null,"author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"EFBFBD48EFBFBD66EFBFBDEFBFBD11EF","is_public":1,"keywords":"webdev,assessment,application,job,hire","publish_date":"2019-09-14 11:39:28","insert_date":"2019-11-30 18:35:18","update_date":null,"delete_date":null,"inserted":1575138918000,"image":[],"rating":{"total":1,"average":"5.0000"},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"EFBFBD48EFBFBD66EFBFBDEFBFBD11EF","name":"Other","insert_date":"2019-07-13 18:10:34","delete_date":null},"store":[],"content":[{"id":"103523EFBFBDEFBFBDEFBFBD11EFBFBD","article_id":"1034EFBFBDEFBFBDEFBFBDEFBFBD11EF","sort":1,"content_type":"html","content":"<p><span style=\"font-size: 8pt;\">(Cropped picture of https:\/\/www.flickr.com\/photos\/34120957@N04\/4199675334 cc-by-2.0)<\/span><\/p>\n<h2>HTML5 &amp; JavaScript assessment tests - what are they designed for?<\/h2>\n<p>That is a question one might ask after reading the multiple-choice answers for the third time to make sure it's not a trick question. I have been involved in hiring developers for years and not once did I ever wonder if being able to write a tag for Atom feeds must be known without google or that being able to disect intentionally misleading chained JavaScript functions provide valuable insight on the abilities of a candidate. Worse, the opposite is the case. A quick typist and strong \"googler\" can ace these tests while being completely useless as a developer. So what are they for?<\/p>\n<p>Well, it seems that companies can't be bothered with candidates that would&nbsp;<\/p>\n<ul>\n<li>lie about their experience<\/li>\n<li>arrange fake recommendations<\/li>\n<li>steal links\/projects and pretend they made them<\/li>\n<li>think that this will make them land &amp; keep a job they are not qualified for<\/li>\n<\/ul>\n<p>But I am sure that these people could not ask someone else to do these assessments for them, could they? Just not the type of personality?<\/p>\n<p>So, what are the consequesnces of this practice? The 99% of us will be humiliated with \"How to declare a doctype\" for the rest of our lives.<\/p>\n<h2>Is it all BS then?<\/h2>\n<p>Just to be clear. I am a fan of technical interviews that are closely related to the technology used and that are designed to reveal the ability to solve problems. And if you need your ability to find the right StackOverflow page to achieve it, that is fine.<\/p>\n<p>But most importantly I am interested in the ability to learn, adapt and innovate. And I have yet to see the pre-assessment test that would target any relevant skill whatsoever. But it is worse:<\/p>\n<p><strong>What are humans training\/learning for?<\/strong><\/p>\n<p>Starting with school we are conditioned to always look at the very next goal. And test results, grades &amp; report cards <strong>must<\/strong> have value to our subconciousness in order to justify the endless hours we invested in it. It is only natural that this process eliminates a clear picture of what abilities are useful and what content relevant. It is not only a misconception, but dangerous to associate \"I can pass bootcamp\/company x's assessment test\" with \"I can write HTML\/JavaScript applications\". However, there are counselors, recruiting firms and authors creating a complete industry on \"how to pass assessment tests\". This is madness! How many more generations of young web developers will have to be dropped into corporate America's lap realizing \"This is so different than what I learned\"? And on the other side: How many more managers will have to find out that the new hire who aced the assessment test just doesn't have what the position requires?<\/p>\n<p>If you are a web developer you should spend your time on projects, new concepts, new patterns, new frameworks, new languages, and so on. Don't waste your time. The industry has a demand and we are the supplier. Let's remember that.<\/p>\n<h2>What to do about the status quo?<\/h2>\n<p>Well, two things must happen. Developers in hiring positions in the industry have to digest what I said a paragraph earlier: Just because we went through this nonsense does not mean we should expect the new recruits to pass the same hurdle. Let's design better filters for what we think must be established in order to justify interviewing time. Let's not quickly surf around and see what the others are doing to assess or hire a flashy startup using ancient IBM tests to outsource pre-asessment to.<\/p>\n<p>And for the canditates: Give feedback! Be bold enough to say something if you think the pre-assessment test does not reflect your abilities nor is it targeted to test anybody else's. When you explain why, the hiring manager will listen. And if not: Well, do you want to work for a company that blocks feedback and judges based on your failure to use HTML5's datalist in a test you take while applying for a React-job? Me neither. Never again.<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>","insert_date":"2019-09-14 14:15:11","delete_date":null}],"metrics":{"total":483,"unique":480},"has_image":false},{"id":"75EFBFBD09EFBFBDD1B211EFBFBD4BEF","name":"SEO strategies for blua.blue","slug":"strategies-for-blua-blue","teaser":"How to get your content listed where you want it to.","image_id":"EFBFBD42EFBFBDEFBFBD13EFBFBD11EF","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"SEO,json-ld,ld+json,marketing,listing,duplicate content","publish_date":"2019-09-07 17:17:31","insert_date":"2019-11-30 18:33:23","update_date":null,"delete_date":null,"inserted":1575138803000,"image":{"id":"EFBFBD42EFBFBDEFBFBD13EFBFBD11EF","format":"image\/png","path":"\/asset\/upload\/0EC796E5A57611E992F0ECF4BBBEDA10\/6c3df546857c89e6c441b4.png","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2019-11-30 18:33:22","delete_date":null},"rating":{"total":1,"average":"5.0000"},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[],"content":[{"id":"75C8A560D1B211EFBFBD4BEFBFBDEFBF","article_id":"75EFBFBD09EFBFBDD1B211EFBFBD4BEF","sort":1,"content_type":"html","content":"<p>Using a headless CMS to deliver to multiple apps and sites is perfect for marketing. Or is it?<\/p>\n<h2>What about \"Duplicate Content\" issues?<\/h2>\n<p>If you start out with search engine optimisation, you most likely go about it like this:<\/p>\n<p>- Is the semantical structure ideal?<\/p>\n<p>- Are meta-tags targeted?<\/p>\n<p>- Are relevant keywords used?<\/p>\n<p>However, the world has become more complicated today. Next to including considerations like serving even static content via SSL, the web rapidly moves towards front-end leaning solutions. This produces two problems:<\/p>\n<p>The content might not be visible for search engines at all or is rendered server-side in multiple locations, producing the \"duplicate content\" issue - a buzz word SEO experts rightfully warn about.<\/p>\n<h2>How does blua.blue handle it?<\/h2>\n<p>When using the blua.blue frontend, a complex hybrid solution renders relevant information statically while dynamic components replace this content using modern JavaScript to create an interactive and dynamic experience.&nbsp;<\/p>\n<p>Additionally, blua.blue outputs additional information for search engines not visible for the reader.<\/p>\n<h2>Does that mean my content will be listed at blua.blue rather than pointing to my page?<\/h2>\n<p>Worry not. After all, blua.blue is a hybrid solution. More, the complete frontend is more or less just a demo for the actual technology. Behind the scenes, the blua.blue is just an app reading from its own CMS. So what do you do in order to have your chosen endpoint interpreted as the \"original source of your content\"?<\/p>\n<h2>Two easy steps<\/h2>\n<p>When writing or editing articles, you might have noticed that there seems to be a difference between <strong>publishing <\/strong>and <strong>public<\/strong>. And that is already the trick:<\/p>\n<p><strong><span style=\"color: #3598db;\">1.<\/span><\/strong> Once done with your content, uncheck the \"make public\" checkbox and then publish your entry.&nbsp;<\/p>\n<p>This will make the article only available by you through the API.&nbsp;<\/p>\n<p><strong><span style=\"color: #3598db;\">2.<\/span><\/strong> Render the property <strong>seo<\/strong> using your server.<\/p>\n<p>When retrieving an article via the API, you will notice that there is a property called <strong>seo<\/strong>. This property uses the <a href=\"https:\/\/schema.org\/\" target=\"_blank\" rel=\"noopener\">schema.org<\/a> format and can directly be placed in a <a href=\"https:\/\/json-ld.org\/\" target=\"_blank\" rel=\"noopener\">ld+json<\/a> tag as respected by Google &amp; Co.<\/p>\n<pre class=\"language-markup\"><code>&lt;script type=\"application\/ld+json\"&gt;\n[[article.seo]]\n&lt;\/script&gt;\n<\/code><\/pre>\n<p>Of course you should still worry about the usual SEO 101 regarding your site, but this should help you to boost your site.<\/p>\n<p><strong>NOTE:<\/strong><\/p>\n<p>When you plan to deliver your content to multiple sites across the web, you should have a strategy on where you want to direct seeking users to.<\/p>","insert_date":"2019-09-07 21:00:02","delete_date":null}],"metrics":{"total":514,"unique":512},"has_image":true},{"id":"EFBFBD1360EFBFBDEFBFBDEFBFBD11EF","name":"How to Build an Express App in Node That Reads From a Headless CMS","slug":"how-to-build-an-express-app-in-node-that-reads-from-headless-cms","teaser":"A headless CMS lets you design your own front-end, sometimes your own back-end. \nLet's set up a small application to get us started.\n\nBeginner friendly. Approx. 20 min. to reproduce \/ follow along","image_id":"EFBFBD69EFBFBDEFBFBD13EFBFBD11EF","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","is_public":1,"keywords":"node,express,js,headless cms,pug","publish_date":"2019-09-06 20:13:21","insert_date":"2019-11-30 18:32:56","update_date":null,"delete_date":null,"inserted":1575138776000,"image":{"id":"EFBFBD69EFBFBDEFBFBD13EFBFBD11EF","format":"image\/jpeg","path":"\/asset\/upload\/0EC796E5A57611E992F0ECF4BBBEDA10\/7c2bfe92ae2565742ce9db.jpeg","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2019-11-30 18:32:53","delete_date":null},"rating":{"total":1,"average":"5.0000"},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"491DEFBFBDEFBFBDEFBFBDEFBFBD11EF","name":"Tutorial","insert_date":"2019-07-13 18:08:58","delete_date":null},"store":[],"content":[{"id":"EFBFBD13EFBFBD13EFBFBDEFBFBD11EF","article_id":"EFBFBD1360EFBFBDEFBFBDEFBFBD11EF","sort":1,"content_type":"html","content":"<h2>Introduction<\/h2>\n<p>I assume that you will read tutorials like I do: having your IDE ready to follow along. I also assume that you are familiar with basic JavaScript and have <strong>node &amp; npm<\/strong> installed. My targeted audience is the \"advanced beginner\", so someone who has basic understanding of the environment and languages but needs a little guidance on how to start building great applications, or the advanced creator who collects ideas and dabbles into new worlds. You can also download the complete project and use this tutorial as explanation.<\/p>\n<p style=\"text-align: right;\">Complete files: <a href=\"https:\/\/github.com\/blua-blue\/basic-node-example\/archive\/v1.0.0.zip\">Download ZIP<\/a> <a href=\"https:\/\/github.com\/blua-blue\/basic-node-example\" target=\"_blank\" rel=\"noopener\">View on GITHub<\/a><\/p>\n<h2>blua.blue<\/h2>\n<p>The headless neoan3 based CMS blua.blue is open source and can be hosted wherever you want. For this simple tutorial, we are going to sign up here: <a href=\"..\/register\/\" target=\"_blank\" rel=\"noopener\">blua.blue registration<\/a><\/p>\n<p>After confirming our email, we are ready to use the API to our liking. It might make sense to write your first article if you feel like it (as a matter of fact, this very toturial has been created in blua.blue).<\/p>\n<p>We are using node as once we gather are solid understanding of the capabilities of a headless CMS, we will see the SEO advantage of rendering content server side (but that is a topic for another post).<\/p>\n<h2>1. Installing prerequisites<\/h2>\n<p>Let's create a project folder. You can name this folder however you want, but I will simply refer to it as \"app-folder\" here. Let us start by installing the we will need via npm<\/p>\n<pre class=\"language-javascript\"><code>npm install express pug axios --save\n<\/code><\/pre>\n<p>While express will be our server we will use pug (former jade) as a template engine and axios to handle our requests to blua.blue<\/p>\n<p>By default, express expects templates to be in the folder <em>views, <\/em>so we might as well create this folder now. To present you with an overview, this will be the file structure at the end:<\/p>\n<div style=\"background: rgba(0,0,0,.7); padding: 5px;\">\n<p><span style=\"color: #ecf0f1;\">views\/<\/span><\/p>\n<p><span style=\"color: #ecf0f1;\">-- list.pug<\/span><\/p>\n<p><span style=\"color: #ecf0f1;\">blua-api.js<\/span><\/p>\n<p><span style=\"color: #ecf0f1;\">server.js<\/span><\/p>\n<\/div>\n<p>To give express a basic spin, let's test if everything runs: Create a file list.pug in \/views and enter some basic markup.<\/p>\n<pre class=\"language-python\"><code>html\n    head\n        title My articles   \n    body\n        h1 Test<\/code><\/pre>\n<p>Now we create the file (if you haven't already) <em>server.js&nbsp;<\/em>and start defining your express server:<\/p>\n<pre class=\"language-javascript\"><code>const express = require('express');\nconst app = express();\n\n\/\/ Routing is crucial. If you are not familiar with route definitions, please look into express documentation \n\napp.get('\/', function (req, res) {\n       res.render('list', function(err,html){\n            res.send(html);\n        })\n});\n\n\/\/ And let us serve on port 3000 \napp.listen(3000, function () {\n    console.log('Example app listening on port 3000!');\n});<\/code><\/pre>\n<p>Running <code>node serve.js<\/code> should give us a running application @ http:\/\/localhost:3000<\/p>\n<h2>2. Api wrapper<\/h2>\n<p>One could argue that it is overkill for our purposes, but I want to create a setup that allows you to go beyond this tutorial with the codebase we create. Let us therefore create the file blua-api.js now:<\/p>\n<pre class=\"language-javascript\"><code>const axios = require('axios');\n\n\/\/ Change this line if you are hosting blua.blue yourself\nlet baseUrl = 'https:\/\/blua.blue\/api.v1\/';\n\nconst api = {\n    config: {\n        baseURL: baseUrl,\n        timeout: 2000,\n        headers:{}\n    },\n    token: false,\n    connected:false,\n    init: async (user, password) =&gt; {\n        if(!this.connected){\n            let instance = axios.create(api.config);\n            await instance.post('login',{username:user,password:password}).then(res=&gt;{\n                api.token = res.data.token;\n                api.connected = true;\n                api.config.headers.Authorization = `Bearer ${res.data.token}`;\n                instance = axios.create(api.config);\n            }).catch(err=&gt;{\n                console.log(err);\n                process.end()\n            });\n            return instance;\n        }\n    }\n};\n\nmodule.exports = api;<\/code><\/pre>\n<p>As you can see we are prepared to make authorized calls with a JWT token with one simple step. The function <em>init<\/em> returns an axios instance. If you are not familiar with axios, or would rather use javaScript's fetch, feel free to implement another solution. Here we want to make sure that the very first call authenticates us and all subsequent calls are authenticated. The usage will be:<\/p>\n<pre class=\"language-javascript\"><code>const bluaBlue = require('.\/blua-api.js');\n\nbluaBlue.init('your-username','your-password').then(api=&gt;{\n    \/\/ make any call documented in https:\/\/blua.blue\/api-documentation\n    api.get('article?slug=my-article').then(...);\n\n});<\/code><\/pre>\n<p><strong>Note<\/strong>: While not covered in this tutorial, your JWT will expire once in a while. You will receive \"unauthorized\" 401 responses in such cases that you can catch. You may simply run <em>init <\/em>again but set the wrappers property <em>connected<\/em> to false so authentication runs again.<\/p>\n<h2>3. Collecting &amp; Rendering a list of your articles<\/h2>\n<p>I don't want to get into design in this tutorial, so we'll use bootstrap for a basic expandable list since I think most people have at least a minimum experience with it.&nbsp;<\/p>\n<p>More or less taken exactly from bootstrap's documentation, let's get back and enhance our template (<em>views\/list.pug<\/em>)<\/p>\n<pre class=\"language-python\"><code>html\n    head\n        title My articles\n        \/\/ let's use the bootstrap files via CDN\n        link(rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.3.1\/css\/bootstrap.min.css\")\n        script(src=\"https:\/\/code.jquery.com\/jquery-3.3.1.slim.min.js\")\n        script(src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/popper.js\/1.14.7\/umd\/popper.min.js\")\n        script(src=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.3.1\/js\/bootstrap.min.js\")\n    body\n        .container\n            h1 My articles\n            .accordion#article-list\n                \/\/ We don't have any articles yet, but we will want to iterate over them.\n                each article in articles\n                    .card\n                        .card-header\n                            h2.mb-0\n                                button.btn.btn-link(type=\"button\" data-toggle=\"collapse\" data-target=\"#\"+article.slug) #{article.name}\n                        .collapse(id=article.slug data-parent=\"#article-list\")\n                            .card-body\n                                p #{article.teaser}\n                                a.btn.btn-success(href=\"https:\/\/blua.blue\/article\/\"+article.slug target=\"_blank\") read<\/code><\/pre>\n<p>So what do we want to achieve? Our app is supposed to fetch all articles of a particular author (you?) and list them. So we will redesign our <em>server.js<\/em> to make a call to blua.blue when a client requests the home page ( <em>get('\/')<\/em> ). As mentioned before, the api wrapper sends authenticated calls after initiation. The easiest approach is to wrap our server logic in this wrapper.<\/p>\n<pre class=\"language-javascript\"><code>const express = require('express');\nconst app = express();\napp.set('view engine', 'pug');\nconst bluaBlue = require('.\/blua-api.js');\n\n\n\/\/ you will want to set your credentials right\nbluaBlue.init('your-username','your-password').then(blua=&gt;{\n    app.get('\/', function (req, res) {\n        \/\/ set the author accordingly. If you have not written any articles yet, use \"neoan\" to test\n        blua.get('articleList?author=your-username').then(d=&gt;{\n            \/\/ be sure to include the data here\n            res.render('list', {articles:d.data}, function(err,html){\n                res.send(html);\n            })\n        });\n    });\n\n    app.listen(3000, function () {\n        console.log('Example app listening on port 3000!');\n    });\n});<\/code><\/pre>\n<h2>That's it!<\/h2>\n<p>If you run in any problems when running <code>node server.js<\/code> , you might want to run your application in debug mode. For Windows this means running <code>set DEBUG=express:* node server.js<\/code> .<\/p>\n<p>Now you are on your own. Can you create dynamic routes for your articles rather than directing the visitors to blua.blue? Can you look into the objects and find additional content you want to use? Are you bold enough to try to update one of your articles?<\/p>\n<p>&nbsp;<\/p>","insert_date":"2019-09-06 23:11:06","delete_date":null}],"metrics":{"total":561,"unique":553},"has_image":true},{"id":"320F46EFBFBDEFBFBD5F11EFBFBD4BEF","name":"Help us document neoan3","slug":"help-us-document-neoan3","teaser":"Over 4000 brave developers are exploring the framework on their own.","image_id":"44EFBFBD74EFBFBD13EFBFBD11EFBFBD","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"EFBFBD48EFBFBD66EFBFBDEFBFBD11EF","is_public":1,"keywords":"php,neoan3,open source,github","publish_date":"2019-09-04 18:17:15","insert_date":"2019-11-30 18:28:59","update_date":null,"delete_date":null,"inserted":1575138539000,"image":{"id":"44EFBFBD74EFBFBD13EFBFBD11EFBFBD","format":"image\/jpeg","path":"\/asset\/upload\/0EC796E5A57611E992F0ECF4BBBEDA10\/276863d82d5a271c8438f7.jpeg","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2019-11-30 18:28:56","delete_date":null},"rating":{"total":1,"average":"4.0000"},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"EFBFBD48EFBFBD66EFBFBDEFBFBD11EF","name":"Other","insert_date":"2019-07-13 18:10:34","delete_date":null},"store":[{"id":"46EFBFBDCA9013EFBFBD11EFBFBD0C0A","article_id":"320F46EFBFBDEFBFBD5F11EFBFBD4BEF","store_key":"dev-to-id","value":"213326","insert_date":"0000-00-00 00:00:00","delete_date":null}],"content":[{"id":"320FEFBFBD08EFBFBD5F11EFBFBD4BEF","article_id":"320F46EFBFBDEFBFBD5F11EFBFBD4BEF","sort":1,"content_type":"html","content":"<h1>What do you do if people start using your project before you are prepared for a release?<\/h1>\n<p>The back-story: <a href=\"http:\/\/neoan.us\/neoan3docs\/\" target=\"_blank\" rel=\"noopener\">neoan3<\/a>'s predecesor is the conclusion of a framework originally designed to teach coding with a very low entry hurdle. As it matured several forks used in production were revised to a complete new approach into what is now the PHP framework <strong>neoan3<\/strong>. The challenge never changed: A framework suitable for the beginner with the stability, security and power of an all-purpose framework.<\/p>\n<p>The code-base has always been open source under an MIT license, but rarely did external developers pick it up or watch the videos explaining particular use-cases or internal tutorials (e.g. <a href=\"https:\/\/youtu.be\/xnEDw8iPAmI\" target=\"_blank\" rel=\"noopener\">Stateless JWT REST API<\/a>).<\/p>\n<h2>What happend?<\/h2>\n<p>The cli-tool supporting neoan3 is versatile enough to be used without neoan3 as some of it's functionalities are useful helpers for a variety of code bases. This is why little attention was given to the fact that the tool was downloaded sometimes over a hundred times per day, sometimes only a few times a week. Recently the tool started to send a request whenever its command to download and install a neoan3 instance was executed. Due to a high respect for privacy it is <strong>not known where, who or why<\/strong> developers install &amp; run neoan3, but that <strong>over 4000 instances<\/strong> are running with currently ~200 new instances a week.<\/p>\n<h2>Is that a problem?<\/h2>\n<p>Converting from \"private tutoring\" to solid documentation &amp; resources cannot be done overnight and cannot be done alone. We therefore hope that people are willing to consider&nbsp;<\/p>\n<p>- contributing to the <a href=\"https:\/\/github.com\/sroehrl\/neoan3docs\" target=\"_blank\" rel=\"noopener\">documentation<\/a><\/p>\n<p>- share their experience, best practices, tips, recommendations, issues in whatever format they see fit<\/p>\n<p>- support the project over-all<\/p>\n<h2>How can you help without a documentation?<\/h2>\n<p>If interested, you are encouraged to start by asking questions, submit issues on GitHub or reach out with direct messages. If you are more experienced, you will notice that the code base is very small and mostly self-explanatory. Feedback of any kind is appreciated.<\/p>\n<p>&nbsp;<\/p>\n<p>(Image by&nbsp;<span style=\"color: #212124; font-family: 'Proxima Nova', 'helvetica neue', helvetica, arial, sans-serif; font-size: 14px; background-color: #f3f5f6;\">&nbsp;<\/span><a style=\"outline: 0px; cursor: pointer; color: #006dac; transition: color 0.15s ease 0s; font-family: 'Proxima Nova', 'helvetica neue', helvetica, arial, sans-serif; font-size: 14px; background-color: #f3f5f6;\" href=\"http:\/\/www.quotecatalog.com\/\" rel=\"noreferrer nofollow\">www.quotecatalog.com<\/a><span style=\"color: #212124; font-family: 'Proxima Nova', 'helvetica neue', helvetica, arial, sans-serif; font-size: 14px; background-color: #f3f5f6;\"> )<\/span><\/p>","insert_date":"2019-09-04 21:58:58","delete_date":null}],"metrics":{"total":639,"unique":637},"has_image":true},{"id":"3CEFBFBDEFBFBD56EFBFBD0211EFBFBD","name":"When politics kill innovation ","slug":"when-politics-kill-innovation","teaser":"How misunderstood diversity killed the PHP Central Europe Conference for good.","image_id":"EFBFBD104FEFBFBD13EFBFBD11EFBFBD","author_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","category_id":"EFBFBD48EFBFBD66EFBFBDEFBFBD11EF","is_public":1,"keywords":"PHP,conference,phpce,2019,community","publish_date":"2019-08-26 11:31:02","insert_date":"2019-11-30 18:04:48","update_date":null,"delete_date":null,"inserted":1575137088000,"image":{"id":"EFBFBD104FEFBFBD13EFBFBD11EFBFBD","format":"image\/jpeg","path":"\/asset\/upload\/0EC796E5A57611E992F0ECF4BBBEDA10\/02ef21a7f0422b7cd4c560.jpeg","inserter_user_id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","insert_date":"2019-11-30 18:04:43","delete_date":null},"rating":{"total":0,"average":null},"author":{"id":"0EC796EFBFBD7611EFBFBDEFBFBDEFBF","customer_id":null,"user_type":"admin","user_name":"neoan","image_id":"EFBFBD1454EFBFBDEFBFBD6411EFBFBD","insert_date":"2019-10-06 18:10:30","delete_date":null},"comments":[],"category":{"id":"EFBFBD48EFBFBD66EFBFBDEFBFBD11EF","name":"Other","insert_date":"2019-07-13 18:10:34","delete_date":null},"store":[],"content":[{"id":"3CEFBFBD3F4EEFBFBD0211EFBFBD4BEF","article_id":"3CEFBFBDEFBFBD56EFBFBD0211EFBFBD","sort":1,"content_type":"html","content":"<h1>\"The conference has been canceled and won't be continued\" (<a href=\"https:\/\/2019.phpce.eu\/en\/\" target=\"_blank\" rel=\"noopener\">site<\/a>)<\/h1>\n<p>Is what the interested visitor finds when visiting the page of this years phpce confernce which was planed to take place in October in Dresden, Germany. What happened?<\/p>\n<p>Well, it started with a tweet critizising the organisation with not having any women as speakers in their lineup. The response from phpce was clear and transparent: There was only one submission from a woman who would have repeated a presentation she already held.&nbsp;<\/p>\n<p>Can this be true in 2019? Of course! All the gender-study courses, the \"women in STEM\" effords and nth-wave feminism movements did not change the fact that the industry is still mainly male.&nbsp;<\/p>\n<p>This doesn't not mean that there aren't any women in the field. Especially in the CMS and IoT realm more and more women surface within the community. But I am not here to discuss my position on \"equal opportunity\" vs. \"equal outcome\"; I am writing these lines to remind the community of who we are.<\/p>\n<h2>The misfits<\/h2>\n<p>Many of today's personalities in the community have been the \"nerds\" in their school-years, the keyboard-warriors against inhumane capitalism, the revolutionary justice-hackers or the social media activists. <em>And yet, there is nothing as neutral as code<\/em>. Whether you are a transgender block-chain guru, a female Laravel artisan, or a black gay encryption enthusiast - the community always judged you (so usually ripped you apart *g*) based on your code and competency. In other words,<\/p>\n<p><strong>despite the fact that men are over-represented, the community has always been inclusive<\/strong>.<\/p>\n<p>But back to the story: The critics claim that phpce should have actively searched for female speakers, dispite the fact that speaking at an event is intentionally organized by submitting a request to speak. And let's not forget what that means:<\/p>\n<p>An ever-changing community that does not create its small, encapsuled elite <strong>must<\/strong> depend on the fair possibility to enter the lineup by participation. As soon as this principle is in danger we create the opposite of what the critics want (assuming they have good intentions).&nbsp;<\/p>","insert_date":"2019-08-26 13:05:54","delete_date":null}],"metrics":{"total":440,"unique":436},"has_image":true}]